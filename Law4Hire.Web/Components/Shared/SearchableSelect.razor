@typeparam TItem
@typeparam TValue
<div class="searchable-select @CssClass">
    <div class="dropdown @(IsOpen ? "show" : "")">
        <input type="text" 
               class="form-control dropdown-toggle @(IsOpen ? "show" : "")"
               @bind="SearchText" 
               @bind:event="oninput"
               @onkeydown="HandleKeyDown"
               @onfocus="() => IsOpen = true"
               @onblur="HandleBlur"
               placeholder="@Placeholder"
               autocomplete="off"
               readonly="@(!AllowSearch)" />
        
        @if (IsOpen && FilteredItems != null)
        {
            <div class="dropdown-menu show w-100" style="max-height: 200px; overflow-y: auto;">
                @if (!FilteredItems.Any())
                {
                    <div class="dropdown-item-text text-muted">No matches found</div>
                }
                else
                {
                    @foreach (var item in FilteredItems)
                    {
                        <a class="dropdown-item @(IsSelected(item) ? "active" : "")" 
                           href="#" 
                           @onclick:preventDefault="true"
                           @onmousedown="() => SelectItem(item)">
                            @DisplayText(item)
                        </a>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public TValue? Value { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    [Parameter] public Func<TItem, TValue> ValueSelector { get; set; } = default!;
    [Parameter] public Func<TItem, string> DisplaySelector { get; set; } = default!;
    [Parameter] public string Placeholder { get; set; } = "Select...";
    [Parameter] public string CssClass { get; set; } = "";
    [Parameter] public bool AllowSearch { get; set; } = true;
    [Parameter] public EventCallback<TValue> OnSelectionChanged { get; set; }

    private bool IsOpen { get; set; }
    private string SearchText { get; set; } = "";
    private IEnumerable<TItem>? FilteredItems => GetFilteredItems();
    private TItem? SelectedItem => Items != null ? Items.FirstOrDefault(item => EqualityComparer<TValue>.Default.Equals(ValueSelector(item), Value)) : default;

    protected override void OnParametersSet()
    {
        if (SelectedItem != null)
        {
            SearchText = DisplaySelector(SelectedItem);
        }
        else if (Value != null && !EqualityComparer<TValue>.Default.Equals(Value, default(TValue)))
        {
            // Try to find the item by value
            var item = Items != null ? Items.FirstOrDefault(i => EqualityComparer<TValue>.Default.Equals(ValueSelector(i), Value)) : default;
            if (item != null)
            {
                SearchText = DisplaySelector(item);
            }
        }
        else
        {
            SearchText = "";
        }
    }

    private IEnumerable<TItem>? GetFilteredItems()
    {
        if (Items == null) return null;
        
        if (string.IsNullOrWhiteSpace(SearchText))
            return Items.Take(50); // Limit initial results
        
        return Items.Where(item => 
            DisplaySelector(item).Contains(SearchText, StringComparison.OrdinalIgnoreCase))
            .Take(50);
    }

    private async Task SelectItem(TItem item)
    {
        var value = ValueSelector(item);
        Value = value;
        SearchText = DisplaySelector(item);
        IsOpen = false;
        
        await ValueChanged.InvokeAsync(value);
        await OnSelectionChanged.InvokeAsync(value);
        StateHasChanged();
    }

    private bool IsSelected(TItem item)
    {
        return EqualityComparer<TValue>.Default.Equals(ValueSelector(item), Value);
    }

    private string DisplayText(TItem item)
    {
        return DisplaySelector(item);
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            IsOpen = false;
            StateHasChanged();
        }
        else if (e.Key == "Enter")
        {
            IsOpen = false;
            StateHasChanged();
        }
    }

    private async Task HandleBlur()
    {
        // Delay closing to allow click events to process
        await Task.Delay(200);
        IsOpen = false;
        StateHasChanged();
    }
}

<style>
.searchable-select .dropdown-menu {
    position: absolute;
    top: 100%;
    left: 0;
    z-index: 1000;
    display: block;
    min-width: 100%;
    padding: 0.5rem 0;
    margin: 0.125rem 0 0;
    font-size: 1rem;
    color: #212529;
    text-align: left;
    background-color: #fff;
    background-clip: padding-box;
    border: 1px solid rgba(0, 0, 0, 0.175);
    border-radius: 0.375rem;
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.175);
}

.searchable-select .dropdown-item {
    display: block;
    width: 100%;
    padding: 0.25rem 1rem;
    clear: both;
    font-weight: 400;
    color: #212529;
    text-align: inherit;
    text-decoration: none;
    white-space: nowrap;
    background-color: transparent;
    border: 0;
    cursor: pointer;
}

.searchable-select .dropdown-item:hover,
.searchable-select .dropdown-item:focus {
    color: #1e2125;
    background-color: #e9ecef;
}

.searchable-select .dropdown-item.active {
    color: #fff;
    background-color: #0d6efd;
}

.searchable-select .dropdown-item-text {
    display: block;
    padding: 0.25rem 1rem;
    margin-bottom: 0;
    font-size: 0.875rem;
    color: #6c757d;
}

.searchable-select {
    position: relative;
}
</style>