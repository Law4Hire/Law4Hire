@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using Law4Hire.Core.DTOs
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Welcome - Law4Hire</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="chat-widget">
                <div class="chat-history" id="chat-history">
                    @foreach (var message in messages)
                    {
                        <div class="chat-message @(message.IsBot ? "bot-message" : "user-message")">
                            @message.Text
                        </div>
                    }
                </div>

                <div class="chat-input-area">
                    @if (!isCompleted)
                    {
                        <EditForm Model="@userInput" OnValidSubmit="HandleNextStep">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <input type="@currentStep.Type" @bind-value="userInput.CurrentValue" class="form-control" placeholder="@currentStep.Placeholder" pattern="@currentStep.Pattern" title="@currentStep.Title" />
                                <ValidationMessage For="@(() => userInput.CurrentValue)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Next &rarr;</button>
                        </EditForm>
                    }
                    else
                    {
                        <div class="text-center">
                            <h4>Thank you, @registrationModel.FirstName! Your account has been created.</h4>
                            <p>You can now log in to access your dashboard.</p>
                            <button class="btn btn-success" @onclick='() => NavigationManager.NavigateTo("/login")'>Go to Login</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> messages = new();
    private List<InterviewStep> steps = new();
    private int currentStepIndex = 0;
    private InterviewStep currentStep => steps[currentStepIndex];
    private UserInputModel userInput = new();
    private UserRegistrationDto registrationModel = new();
    private bool isCompleted = false;

    protected override void OnInitialized()
    {
        steps.Add(new InterviewStep { Question = "Hello! Let's get started. What is your full legal name?", Placeholder = "First and Last Name", PropertyName = "FullName", Type = "text" });
        steps.Add(new InterviewStep { Question = "What is your primary email address?", Placeholder = "Email Address", PropertyName = "Email", Type = "email" });
        steps.Add(new InterviewStep { Question = "And your phone number?", Placeholder = "Phone Number", PropertyName = "PhoneNumber", Type = "tel" });
        steps.Add(new InterviewStep { Question = "Great. Now, please create a secure password for your account.", Placeholder = "Password", PropertyName = "Password", Type = "password", Pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}", Title = "Must contain at least one number, one uppercase, one lowercase, one special character, and at least 8 characters" });

        messages.Add(new ChatMessage { Text = steps[0].Question, IsBot = true });
    }

    private async Task HandleNextStep()
    {
        if (string.IsNullOrWhiteSpace(userInput.CurrentValue)) return;

        messages.Add(new ChatMessage { Text = userInput.CurrentValue, IsBot = false });

        var propName = currentStep.PropertyName;
        if (propName == "FullName")
        {
            var names = userInput.CurrentValue.Split(' ', 2);
            registrationModel.FirstName = names[0];
            registrationModel.LastName = names.Length > 1 ? names[1] : "";
        }
        else if (propName == "Email") registrationModel.Email = userInput.CurrentValue;
        else if (propName == "PhoneNumber") registrationModel.PhoneNumber = userInput.CurrentValue;
        else if (propName == "Password") registrationModel.Password = userInput.CurrentValue;

        userInput.CurrentValue = null;

        currentStepIndex++;
        if (currentStepIndex < steps.Count)
        {
            messages.Add(new ChatMessage { Text = steps[currentStepIndex].Question, IsBot = true });
        }
        else
        {
            await RegisterUser();
        }
        StateHasChanged();
    }

    private async Task RegisterUser()
    {
        var response = await Http.PostAsJsonAsync("api/auth/register", registrationModel);
        if (response.IsSuccessStatusCode)
        {
            isCompleted = true;
        }
        else
        {
            messages.Add(new ChatMessage { Text = "There was an error creating your account. Please try again.", IsBot = true });
        }
    }

    public class ChatMessage { public string Text { get; set; } = ""; public bool IsBot { get; set; } }
    public class InterviewStep { public string Question { get; set; } = ""; public string Placeholder { get; set; } = ""; public string PropertyName { get; set; } = ""; public string Type { get; set; } = "text"; public string? Pattern { get; set; } public string? Title { get; set; } }
    public class UserInputModel { [Required] public string? CurrentValue { get; set; } }
}