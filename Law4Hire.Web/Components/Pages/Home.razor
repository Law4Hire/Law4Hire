@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net
@using System.Text.Json
@using Law4Hire.Core.DTOs
@using Law4Hire.Core.Entities
@using System.Linq
@using Microsoft.Extensions.Localization
@using Law4Hire.Web.Components.Shared
@using Microsoft.FluentUI.AspNetCore.Components
@rendermode InteractiveServer
@* @inject HttpClient Http *@
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Home> Localizer
@inject Law4Hire.Web.State.CultureState CultureState
@inject Law4Hire.Web.State.AuthState AuthState
@inject Law4Hire.Application.Services.VisaNarrowingService VisaNarrowingService
@inject ILogger<Home> Logger
@implements IDisposable

<PageTitle>@Localizer["PageTitle"] - Law4Hire</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
    @if (!showInterview)
    {
        <!-- Centered Welcome Section -->
        <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="mb-8">
            <MudText Typo="Typo.h2" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary" Class="font-weight-bold">
                @Localizer["WelcomeTitle"]
            </MudText>
            <MudText Typo="Typo.h5" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Secondary" Class="text-center">
                @Localizer["WelcomeSubtitle"]
            </MudText>
        </MudStack>
        
        <!-- Responsive Immigration Options Grid -->
        <MudGrid Justify="Justify.Center" Spacing="3">
            <!-- Visit USA -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Visit)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">✈️</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["VisitUSA"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Immigrate -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Immigrate)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">🏠</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["ImmigrateGreenCard"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Investment -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Investment)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">💰</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["InvestUSA"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Work -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Work)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">💼</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["WorkUSA"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Asylum -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Asylum)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">🛡️</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["ApplyAsylum"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Study -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Study)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">📚</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["StudyUSA"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>

            <!-- Family -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease;" 
                         @onclick="() => StartInterview(ImmigrationGoal.Family)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">👨‍👩‍👧‍👦</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Primary">
                            @Localizer["JoinFamily"]
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <!-- Citizenship/Naturalization and Adoption -->
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudCard Class="immigration-card special-card mud-height-full" Style="cursor: pointer; transition: all 0.3s ease; border: 2px solid var(--mud-palette-warning);" 
                         @onclick="() => StartInterview(ImmigrationGoal.Special)">
                    <MudCardContent Class="d-flex flex-column align-center justify-center pa-6" Style="min-height: 180px;">
                        <MudText Typo="Typo.h1" Class="mb-4">🏛️</MudText>
                        <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center" Color="MudBlazor.Color.Warning">
                            Citizenship/Naturalization and Adoption
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
        
        <!-- Login Section for Existing Users -->
        @if (!AuthState.IsLoggedIn)
        {
            <MudDivider Class="my-8" />
            <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="mb-4">
                <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary">Already have an account?</MudText>
                <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" Size="Size.Large"
                           OnClick="GoToLogin" StartIcon="Icons.Material.Filled.Login">
                    Login to Your Account
                </MudButton>
            </MudStack>
        }
    }
    else
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" lg="8">
                <MudCard Class="interview-card pa-6">
                    <MudCardContent>
                        <div class="interview-header mb-6">
                            <MudStack Row Spacing="2" Class="mb-4">
                                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="BackToOptions">
                                    ← @Localizer["BackToOptions"]
                                </MudButton>
                                @if (AuthState.IsLoggedIn)
                                {
                                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="ResetInterview">
                                        🔄 Reset Interview
                                    </MudButton>
                                }
                            </MudStack>
                            <MudText Typo="Typo.h3" Color="MudBlazor.Color.Primary" Class="mb-4">
                                @Localizer["StartYourJourney"]
                            </MudText>
                            <MudText Typo="Typo.body1" Color="MudBlazor.Color.Secondary">
                                @GetGoalDescription(selectedGoal)
                            </MudText>
                    </div>
                    
                        <div class="interview-content">
                            @if (isRedirecting)
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="4">
                                    <MudProgressCircular Color="MudBlazor.Color.Primary" Indeterminate="true" />
                                    <MudText Typo="Typo.body1">Taking you to your interview...</MudText>
                                </MudStack>
                            }
                        else if (!isCompleted)
                        {
                            <EditForm Model="@userInput" OnValidSubmit="HandleNextStep">
                                <DataAnnotationsValidator />
                                
                                <Microsoft.FluentUI.AspNetCore.Components.FluentStack Orientation="Microsoft.FluentUI.AspNetCore.Components.Orientation.Vertical" VerticalGap="10" Style="margin-bottom: 2rem;">
                                    <Microsoft.FluentUI.AspNetCore.Components.FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.Body" Style="font-weight: 600;">
                                        @currentStep.Question
                                    </Microsoft.FluentUI.AspNetCore.Components.FluentLabel>
                                    
                                    @if (currentStep.Type == "select")
                                    {
                                        <select @bind="userInput.CurrentValue" class="form-control" required="@currentStep.Required">
                                            <option value="">@Localizer["PleaseSelect"]</option>
                                            @if (currentStep.Options != null)
                                            {
                                                @foreach (var option in currentStep.Options)
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else if (currentStep.Type == "radio")
                                    {
                                        @if (currentStep.Options != null)
                                        {
                                            @foreach (var option in currentStep.Options)
                                            {
                                                <div class="form-check">
                                                    <input class="form-check-input" 
                                                           type="radio" 
                                                           name="@currentStep.PropertyName" 
                                                           value="@option" 
                                                           @onchange="@((e) => userInput.CurrentValue = e.Value?.ToString())"
                                                           checked="@(userInput.CurrentValue == option)" />
                                                    <label class="form-check-label">@option</label>
                                                </div>
                                            }
                                        }
                                    }
                                    else if (currentStep.Type == "searchableselect-country")
                                    {
                                        @if (countries != null)
                                        {
                                            <SearchableSelect TItem="CountryDto" 
                                                            TValue="string"
                                                            Items="countries"
                                                            Value="@userInput.CurrentValue" 
                                                            ValueChanged="@((string value) => userInput.CurrentValue = value)"
                                                            ValueSelector="@(c => c.Name)"
                                                            DisplaySelector="@(c => c.Name)"
                                                            Placeholder="@currentStep.Placeholder"
                                                            OnSelectionChanged="@HandleCountryChanged" />
                                        } 
                                    }
                                    else if (currentStep.Type == "searchableselect-state")
                                    {
                                        @if (ShouldShowStateField() && usStates != null)
                                        {
                                            <SearchableSelect TItem="USStateDto" 
                                                            TValue="string"
                                                            Items="usStates"
                                                            Value="@userInput.CurrentValue" 
                                                            ValueChanged="@((string value) => userInput.CurrentValue = value)"
                                                            ValueSelector="@(s => s.Name)"
                                                            DisplaySelector="@(s => s.Name)"
                                                            Placeholder="@currentStep.Placeholder" />
                                        }
                                        else if (!ShouldShowStateField())
                                        {
                                            <input type="text" 
                                                   @bind-value="userInput.CurrentValue" 
                                                   class="form-control" 
                                                   placeholder="Enter state/province/region" 
                                                   required="@currentStep.Required" />
                                        }
                                    }
                                    else if (currentStep.Type == "password")
                                    {
                                        <input type="password"
                                               @bind-value="userInput.CurrentValue"
                                               class="form-control"
                                               placeholder="@currentStep.Placeholder"
                                               pattern="@currentStep.Pattern"
                                               title="@currentStep.Title"
                                               required="@currentStep.Required"
                                               autofocus />
                                    }
                                    else
                                    {
                                        <input type="@currentStep.Type" 
                                               @bind-value="userInput.CurrentValue" 
                                               class="form-control" 
                                               placeholder="@currentStep.Placeholder" 
                                               pattern="@currentStep.Pattern" 
                                               title="@currentStep.Title" 
                                               required="@currentStep.Required" />
                                    }
                                    
                                    <ValidationMessage For="@(() => userInput.CurrentValue)" />

                                    @if (emailExists && currentStepIndex == 5)
                                    {
                                        <div class="alert alert-info mt-2">
                                            @Localizer["EmailExistsMessage"]
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(errorMessage))
                                    {
                                        <div class="alert alert-danger mt-2">@errorMessage</div>
                                    }
                                </Microsoft.FluentUI.AspNetCore.Components.FluentStack>
                                
                                <MudStack Row Spacing="2" Class="mt-6">
                                    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">
                                        @if (currentStepIndex < steps.Count - 1)
                                        {
                                            @Localizer["Next"] <span>→</span>
                                        }
                                        else
                                        {
                                            @Localizer["Complete"]
                                        }
                                    </MudButton>
                                    
                                    @if (currentStepIndex > 0)
                                    {
                                        <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Outlined" OnClick="PreviousStep">
                                            <span>←</span> @Localizer["Previous"]
                                        </MudButton>
                                    }
                                </MudStack>
                            </EditForm>
                        }
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
</MudContainer>

@code {
[Inject] private HttpClient Http { get; set; } = default!;
[Inject] private NavigationManager Nav { get; set; } = default!;


    private async Task SelectCategory(string category)
    {
        await Http.PostAsync($"/api/visainterview/reset?category={category}", null);
        Nav.NavigateTo("/interview");
    }

    public enum ImmigrationGoal
    {
        Visit,
        Immigrate,
        Investment,
        Work,
        Asylum,
        Study,
        Family,
        Special
    }

    private bool showInterview = false;
    private bool isCompleted = false;
    private bool emailExists = false;
    private bool askState = false;
    private bool isRedirecting = false;
    private ImmigrationGoal selectedGoal;
    private List<InterviewStep> steps = new();
    private int currentStepIndex = 0;
    private InterviewStep currentStep =>
        currentStepIndex >= 0 && currentStepIndex < steps.Count
            ? steps[currentStepIndex]
            : new InterviewStep();
    private UserInputModel userInput = new();
    private UserRegistrationDto registrationModel = new();
    private Guid? intakeSessionId;
    private Dictionary<string, string> savedAnswers = new();
    private int goalStartIndex;
    private string? errorMessage;
    
    // Lookup data for dropdowns
    private CountryDto[]? countries;
    private USStateDto[]? usStates;
    private string[]? maritalStatusOptions;
    private string[]? educationLevels;

    protected override async Task OnInitializedAsync()
    {
        await InitializeStepsAsync();
        CultureState.OnChange += OnCultureChanged;
        AuthState.OnChange += OnAuthChanged;
    }

    private async void OnCultureChanged()
    {
        await InitializeStepsAsync(); // Reinitialize steps with new culture
        await InvokeAsync(StateHasChanged);
    }

    private void OnAuthChanged()
    {
        if (!AuthState.IsLoggedIn)
        {
            BackToOptions();
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task InitializeStepsAsync()
    {
        // Load lookup data for dropdowns
        await LoadLookupData();
        
        var registrationSteps = new List<InterviewStep>
        {
            new InterviewStep
            {
                Question = Localizer["FirstNameQuestion"],
                Placeholder = Localizer["FirstNamePlaceholder"],
                PropertyName = "FirstName",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["LastNameQuestion"],
                Placeholder = Localizer["LastNamePlaceholder"],
                PropertyName = "LastName",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["MiddleNameQuestion"],
                Placeholder = Localizer["MiddleNamePlaceholder"],
                PropertyName = "MiddleName",
                Type = "text",
                Required = false
            },
            new InterviewStep
            {
                Question = "What is your date of birth?",
                Placeholder = "Select date of birth",
                PropertyName = "DateOfBirth",
                Type = "date"
            },
            new InterviewStep
            {
                Question = "What is your marital status?",
                Placeholder = "Select marital status",
                PropertyName = "MaritalStatus",
                Type = "select",
                Options = maritalStatusOptions?.ToList() ?? new List<string> { "Single", "Married", "Divorced", "Widowed", "Separated" }
            },
            new InterviewStep
            {
                Question = "What is your country of citizenship?",
                Placeholder = "Select your citizenship country",
                PropertyName = "CitizenshipCountryId",
                Type = "searchableselect-country"
            },
            new InterviewStep
            {
                Question = "Do you have relatives living in the US?",
                Placeholder = "Select an option",
                PropertyName = "HasRelativesInUS",
                Type = "radio",
                Options = new List<string> { "Yes", "No" }
            },
            new InterviewStep
            {
                Question = "Do you have a job offer in the US?",
                Placeholder = "Select an option",
                PropertyName = "HasJobOffer",
                Type = "radio",
                Options = new List<string> { "Yes", "No" }
            },
            new InterviewStep
            {
                Question = "What is your education level?",
                Placeholder = "Select education level",
                PropertyName = "EducationLevel",
                Type = "select",
                Options = educationLevels?.ToList() ?? new List<string> { "Less than High School", "High School", "Some College", "Associate's Degree", "Bachelor's Degree", "Master's Degree", "Doctorate", "Professional Degree" }
            },
            new InterviewStep
            {
                Question = "Do you fear persecution in your home country?",
                Placeholder = "Select an option",
                PropertyName = "FearOfPersecution",
                Type = "radio",
                Options = new List<string> { "Yes", "No" }
            },
            new InterviewStep
            {
                Question = "Have you had previous visa denials?",
                Placeholder = "Select an option",
                PropertyName = "HasPastVisaDenials",
                Type = "radio",
                Options = new List<string> { "Yes", "No" }
            },
            new InterviewStep
            {
                Question = "Have you had any US immigration status violations?",
                Placeholder = "Select an option",
                PropertyName = "HasStatusViolations",
                Type = "radio",
                Options = new List<string> { "Yes", "No" }
            },
            new InterviewStep
            {
                Question = Localizer["AddressQuestion"],
                Placeholder = Localizer["AddressPlaceholder"],
                PropertyName = "Address1",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["Address2Question"],
                Placeholder = Localizer["Address2Placeholder"],
                PropertyName = "Address2",
                Type = "text",
                Required = false
            },
            new InterviewStep
            {
                Question = Localizer["CityQuestion"],
                Placeholder = Localizer["CityPlaceholder"],
                PropertyName = "City",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["CountryQuestion"],
                Placeholder = Localizer["CountryPlaceholder"],
                PropertyName = "Country",
                Type = "searchableselect-country"
            },
            new InterviewStep
            {
                Question = Localizer["StateQuestion"],
                Placeholder = Localizer["StatePlaceholder"],
                PropertyName = "State",
                Type = "searchableselect-state",
                Required = false
            },
            new InterviewStep
            {
                Question = Localizer["PostalCodeQuestion"],
                Placeholder = Localizer["PostalCodePlaceholder"],
                PropertyName = "PostalCode",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["PhoneQuestion"],
                Placeholder = Localizer["PhonePlaceholder"],
                PropertyName = "PhoneNumber",
                Type = "tel"
            }
        };

        steps = new List<InterviewStep>();

        if (!AuthState.IsLoggedIn)
        {
            steps.Add(new InterviewStep
            {
                Question = Localizer["EmailQuestion"],
                Placeholder = Localizer["EmailPlaceholder"],
                PropertyName = "Email",
                Type = "email"
            });

            steps.AddRange(registrationSteps);

            steps.Add(new InterviewStep
            {
                Question = Localizer["PasswordQuestion"],
                Placeholder = Localizer["PasswordPlaceholder"],
                PropertyName = "Password",
                Type = "password",
                Pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}",
                Title = Localizer["PasswordRequirements"]
            });
        }

        goalStartIndex = steps.Count;

        await Task.CompletedTask;
    }

    private async Task StartInterview(ImmigrationGoal goal)
    {
        selectedGoal = goal;
        registrationModel.ImmigrationGoal = goal.ToString();

        // If user is logged in, update their category and go directly to Phase 2
        if (AuthState.IsLoggedIn)
        {
            await UpdateUserCategory(goal);
            NavigationManager.NavigateTo("/interview/phase2");
            return;
        }

        // If not logged in, show interview form
        showInterview = true;
        currentStepIndex = 0;
        userInput = new UserInputModel();
        registrationModel = new UserRegistrationDto();
        savedAnswers = new Dictionary<string, string>();
        isCompleted = false;
        emailExists = false;
        intakeSessionId = null;
        isRedirecting = false;
        await InitializeStepsAsync();
    }

    private async Task LoadExistingSession()
    {
        try
        {
            if (AuthState.CurrentUser == null)
                return;

            var sessions = await Http.GetFromJsonAsync<List<IntakeSessionDto>>($"api/intake/users/{AuthState.CurrentUser.Id}/sessions");
            var active = sessions?.FirstOrDefault(s => s.CompletedAt == null);

            if (active != null)
            {
                intakeSessionId = active.Id;
                if (!string.IsNullOrWhiteSpace(active.SessionData))
                {
                    var progress = JsonSerializer.Deserialize<UpdateSessionProgressDto>(active.SessionData);
                    if (progress != null)
                    {
                        savedAnswers = progress.Answers;
                        currentStepIndex = progress.CurrentStep;
                        if (AuthState.IsLoggedIn && !steps.Any(s => s.PropertyName == "Email") && currentStepIndex >= 1)
                        {
                            currentStepIndex -= 1;
                        }
                        if (currentStepIndex >= steps.Count)
                        {
                            isCompleted = true;
                        }
                        else if (savedAnswers.TryGetValue(currentStep.PropertyName, out var val))
                        {
                            userInput.CurrentValue = val;
                        }
                    }
                }
            }
            else
            {
                var create = new CreateIntakeSessionDto(AuthState.CurrentUser.Id, CultureState.CurrentCulture.Name);
                var response = await Http.PostAsJsonAsync("api/intake/sessions", create);
                if (response.IsSuccessStatusCode)
                {
                    var created = await response.Content.ReadFromJsonAsync<IntakeSessionDto>();
                    intakeSessionId = created?.Id;
                }
            }
        }
        catch {}
    }

    private void BackToOptions()
    {
        showInterview = false;
        selectedGoal = ImmigrationGoal.Visit;
        currentStepIndex = 0;
    }

    private async Task ResetInterview()
    {
        if (AuthState.CurrentUser == null)
            return;
        await Http.DeleteAsync($"api/VisaInterview/reset?userId={AuthState.CurrentUser.Id}");
        BackToOptions();
        savedAnswers.Clear();
        intakeSessionId = null;
    }

    private void GoToLogin() 
    { 
        NavigationManager.NavigateTo("/login"); 
    }

    private void GoToDashboard() 
    { 
        NavigationManager.NavigateTo("/dashboard"); 
    }

    private string GetGoalDescription(ImmigrationGoal goal)
    {
        return goal switch
        {
            ImmigrationGoal.Visit => Localizer["VisitDescription"],
            ImmigrationGoal.Immigrate => Localizer["ImmigrateDescription"],
            ImmigrationGoal.Investment => Localizer["InvestmentDescription"],
            ImmigrationGoal.Work => Localizer["WorkDescription"],
            ImmigrationGoal.Asylum => Localizer["AsylumDescription"],
            ImmigrationGoal.Study => Localizer["StudyDescription"],
            ImmigrationGoal.Family => Localizer["FamilyDescription"],
            ImmigrationGoal.Special => "Citizenship, Naturalization, and Adoption services to help with your special immigration needs.",
            _ => ""
        };
    }

    private async Task HandleNextStep()
    {
        if (string.IsNullOrWhiteSpace(userInput.CurrentValue) && currentStep.Required != false)
            return;

        var propName = currentStep.PropertyName;
        savedAnswers[propName] = userInput.CurrentValue ?? "";

        switch (propName)
        {
            case "FirstName":
                registrationModel.FirstName = userInput.CurrentValue ?? "";
                break;
            case "LastName":
                registrationModel.LastName = userInput.CurrentValue ?? "";
                break;
            case "MiddleName":
                registrationModel.MiddleName = userInput.CurrentValue ?? "";
                break;
            case "Address1":
                registrationModel.Address1 = userInput.CurrentValue ?? "";
                break;
            case "Address2":
                registrationModel.Address2 = userInput.CurrentValue ?? "";
                break;
            case "City":
                registrationModel.City = userInput.CurrentValue ?? "";
                break;
            case "Country":
                registrationModel.Country = userInput.CurrentValue ?? "";
                askState = registrationModel.Country.Trim().Equals("USA", StringComparison.OrdinalIgnoreCase) ||
                           registrationModel.Country.Trim().Equals("United States", StringComparison.OrdinalIgnoreCase) ||
                           registrationModel.Country.Trim().Equals("US", StringComparison.OrdinalIgnoreCase);
                break;
            case "State":
                registrationModel.State = userInput.CurrentValue ?? "";
                break;
            case "PostalCode":
                registrationModel.PostalCode = userInput.CurrentValue ?? "";
                break;
            case "PhoneNumber":
                registrationModel.PhoneNumber = userInput.CurrentValue ?? "";
                break;
            case "DateOfBirth":
                if (DateTime.TryParse(userInput.CurrentValue, out var dateOfBirth))
                {
                    registrationModel.DateOfBirth = dateOfBirth;
                }
                break;
            case "MaritalStatus":
                registrationModel.MaritalStatus = userInput.CurrentValue ?? "";
                break;
            case "CitizenshipCountryId":
                var citizenshipCountry = countries?.FirstOrDefault(c => c.Name == userInput.CurrentValue);
                registrationModel.CitizenshipCountryId = citizenshipCountry?.Id;
                break;
            case "HasRelativesInUS":
                registrationModel.HasRelativesInUS = userInput.CurrentValue?.Equals("Yes", StringComparison.OrdinalIgnoreCase);
                break;
            case "HasJobOffer":
                registrationModel.HasJobOffer = userInput.CurrentValue?.Equals("Yes", StringComparison.OrdinalIgnoreCase);
                break;
            case "EducationLevel":
                registrationModel.EducationLevel = userInput.CurrentValue ?? "";
                break;
            case "FearOfPersecution":
                registrationModel.FearOfPersecution = userInput.CurrentValue?.Equals("Yes", StringComparison.OrdinalIgnoreCase);
                break;
            case "HasPastVisaDenials":
                registrationModel.HasPastVisaDenials = userInput.CurrentValue?.Equals("Yes", StringComparison.OrdinalIgnoreCase);
                break;
            case "HasStatusViolations":
                registrationModel.HasStatusViolations = userInput.CurrentValue?.Equals("Yes", StringComparison.OrdinalIgnoreCase);
                break;
            case "Email":
                registrationModel.Email = userInput.CurrentValue ?? "";
                emailExists = !string.IsNullOrWhiteSpace(registrationModel.Email) && await CheckEmailExists(registrationModel.Email);
                if (!AuthState.IsLoggedIn)
                {
                    var pwdIndex = steps.FindIndex(s => s.PropertyName == "Password");
                    if (pwdIndex >= 0)
                    {
                        steps[pwdIndex].Question = emailExists ? Localizer["ExistingPasswordQuestion"] : Localizer["PasswordQuestion"];
                        steps[pwdIndex].Placeholder = emailExists ? Localizer["ExistingPasswordPlaceholder"] : Localizer["PasswordPlaceholder"];
                        if (emailExists)
                        {
                            steps[pwdIndex].Pattern = null;
                            steps[pwdIndex].Title = null;
                        }
                        else
                        {
                            steps[pwdIndex].Pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}";
                            steps[pwdIndex].Title = Localizer["PasswordRequirements"];
                        }
                        if (emailExists)
                        {
                            // jump directly to password step
                            currentStepIndex = pwdIndex - 1;
                        }
                    }
                }
                break;
            case "Password":
                registrationModel.Password = userInput.CurrentValue ?? "";
                if (emailExists)
                {
                    errorMessage = null;
                    var success = await CompleteRegistration();
                    if (success)
                    {
                        // Set redirecting flag to hide form
                        isRedirecting = true;
                        StateHasChanged();
                        
                        // For existing users, go directly to Phase 2 without showing the form
                        await StartVisaInterviewAsync();
                        NavigationManager.NavigateTo("/interview/phase2");
                        return;
                    }
                    else
                    {
                        userInput.CurrentValue = null;
                        StateHasChanged();
                        return;
                    }
                }
                break;
        }

        userInput.CurrentValue = null;
        currentStepIndex++;

        // Skip state step if not required
        if (propName == "Country" && !askState)
        {
            if (currentStepIndex < steps.Count && steps[currentStepIndex].PropertyName == "State")
            {
                currentStepIndex++;
            }
        }

        if (!emailExists && currentStepIndex == goalStartIndex)
        {
            errorMessage = null;
            var success = await CompleteRegistration();
            if (success)
            {
                // Set redirecting flag to hide form
                isRedirecting = true;
                StateHasChanged();
                
                // For new users, go directly to Phase 2 after registration
                await StartVisaInterviewAsync();
                NavigationManager.NavigateTo("/interview/phase2");
                return;
            }
            else
            {
                currentStepIndex--;
                userInput.CurrentValue = null;
                StateHasChanged();
                return;
            }
        }

        if (intakeSessionId.HasValue && currentStepIndex > goalStartIndex)
        {
            await SaveProgress();
        }

        if (currentStepIndex >= steps.Count)
        {
            await StartVisaInterviewAsync();
            NavigationManager.NavigateTo("/interview/phase2");
            return;
        }

        StateHasChanged();
    }


    private void PreviousStep()
    {
        if (currentStepIndex > 0)
        {
            currentStepIndex--;
            if (savedAnswers.TryGetValue(currentStep.PropertyName, out var val))
                userInput.CurrentValue = val;
            else
                userInput.CurrentValue = null;
        }
    }
    private async Task<bool> CheckEmailExists(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
        {
            return false;
        }
        
        try 
        { 
            var response = await Http.GetAsync($"api/auth/check-email?email={Uri.EscapeDataString(email)}"); 
            return response.IsSuccessStatusCode; 
        }
        catch 
        { 
            return false; 
        }
    }
    private async Task<bool> CompleteRegistration()
    {
        if (string.IsNullOrWhiteSpace(registrationModel.Email) || string.IsNullOrWhiteSpace(registrationModel.Password))
        {
            errorMessage = "Email and password are required.";
            return false;
        }
        
        try
        {
            HttpResponseMessage response;
            if (emailExists)
            {
                var loginDto = new UserLoginDto
                {
                    Email = registrationModel.Email,
                    Password = registrationModel.Password
                };
                response = await Http.PostAsJsonAsync("api/auth/login", loginDto);
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    errorMessage = Localizer["LoginError"];
                    return false;
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/auth/register", registrationModel);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = Localizer["RegistrationError"];
                    return false;
                }
            }

            if (response.IsSuccessStatusCode)
            {
                var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (loginResult != null)
                {
                    var user = await Http.GetFromJsonAsync<UserDto>($"api/users/{loginResult.UserId}");
                    if (user != null)
                    {
                        AuthState.SetUser(user);
                        
                        // Apply visa narrowing logic
                        await ApplyVisaNarrowingLogic();
                        
                        // Update the user's category after login/registration
                        await UpdateUserCategoryAfterAuth(selectedGoal);
                    }
                }
                return true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration/Login error: {ex.Message}");
            errorMessage = Localizer["RegistrationError"];
        }

        return false;
    }

    private async Task UpdateUserCategory(ImmigrationGoal goal)
    {
        if (AuthState.CurrentUser == null)
            return;

        try
        {
            var categoryName = goal switch
            {
                ImmigrationGoal.Visit => "Visit",
                ImmigrationGoal.Immigrate => "Immigrate",
                ImmigrationGoal.Investment => "Investment",
                ImmigrationGoal.Work => "Work",
                ImmigrationGoal.Asylum => "Asylum",
                ImmigrationGoal.Study => "Study",
                ImmigrationGoal.Family => "Family",
                _ => "Immigrate"
            };

            var updateDto = new
            {
                Category = categoryName
            };
            
            var response = await Http.PutAsJsonAsync($"api/users/{AuthState.CurrentUser.Id}/category", updateDto);
            if (response.IsSuccessStatusCode)
            {
                // Update the current user in AuthState
                var updatedUser = AuthState.CurrentUser with { Category = categoryName };
                AuthState.SetUser(updatedUser);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to update user category: {ex.Message}");
        }
    }

    private async Task UpdateUserCategoryAfterAuth(ImmigrationGoal goal)
    {
        if (AuthState.CurrentUser == null)
            return;

        try
        {
            var categoryName = goal switch
            {
                ImmigrationGoal.Visit => "Visit",
                ImmigrationGoal.Immigrate => "Immigrate",
                ImmigrationGoal.Investment => "Investment",
                ImmigrationGoal.Work => "Work",
                ImmigrationGoal.Asylum => "Asylum",
                ImmigrationGoal.Study => "Study",
                ImmigrationGoal.Family => "Family",
                _ => "Immigrate"
            };

            var updateDto = new UpdateCategoryDto
            {
                Category = categoryName
            };
            
            var response = await Http.PutAsJsonAsync($"api/users/{AuthState.CurrentUser.Id}/category", updateDto);
            if (response.IsSuccessStatusCode)
            {
                // Update the current user in AuthState
                var updatedUser = AuthState.CurrentUser with { Category = categoryName };
                AuthState.SetUser(updatedUser);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to update user category: {ex.Message}");
        }
    }

    private async Task StartVisaInterviewAsync()
    {
        if (AuthState.CurrentUser == null)
            return;

        var categoryName = selectedGoal switch
        {
            ImmigrationGoal.Visit => "Visit",
            ImmigrationGoal.Immigrate => "Immigrate",
            ImmigrationGoal.Investment => "Investment", 
            ImmigrationGoal.Work => "Work",
            ImmigrationGoal.Asylum => "Asylum",
            ImmigrationGoal.Study => "Study",
            ImmigrationGoal.Family => "Family",
            _ => "Immigrate"
        };

        var initPayload = new
        {
            userId = AuthState.CurrentUser.Id,
            role = "client",
            category = categoryName,
            language = CultureState.CurrentCulture.Name,
            firstName = registrationModel.FirstName,
            lastName = registrationModel.LastName
        };

        try
        {
            await Http.PostAsJsonAsync("api/VisaInterview/phase2/step", initPayload);
        }
        catch { }
    }

    private async Task LoadLookupData()
    {
        try
        {
            // Load countries
            var countriesResponse = await Http.GetAsync("api/lookups/countries");
            if (countriesResponse.IsSuccessStatusCode)
            {
                countries = await countriesResponse.Content.ReadFromJsonAsync<CountryDto[]>();
            }

            // Load US states
            var statesResponse = await Http.GetAsync("api/lookups/us-states");
            if (statesResponse.IsSuccessStatusCode)
            {
                usStates = await statesResponse.Content.ReadFromJsonAsync<USStateDto[]>();
            }

            // Load marital status options
            var maritalResponse = await Http.GetAsync("api/lookups/marital-status");
            if (maritalResponse.IsSuccessStatusCode)
            {
                maritalStatusOptions = await maritalResponse.Content.ReadFromJsonAsync<string[]>();
            }

            // Load education levels
            var educationResponse = await Http.GetAsync("api/lookups/education-levels");
            if (educationResponse.IsSuccessStatusCode)
            {
                educationLevels = await educationResponse.Content.ReadFromJsonAsync<string[]>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading lookup data: {ex.Message}");
        }
    }

    private async Task SaveProgress()
    {
        if (!intakeSessionId.HasValue)
            return;

        var progress = new UpdateSessionProgressDto(currentStepIndex, savedAnswers);
        await Http.PatchAsJsonAsync($"api/intake/sessions/{intakeSessionId}/progress", progress);
    }

    private void HandleCountryChanged(string countryName)
    {
        userInput.CurrentValue = countryName;
        StateHasChanged();
    }

    private bool ShouldShowStateField()
    {
        var country = savedAnswers.ContainsKey("Country") ? savedAnswers["Country"] : userInput.CurrentValue;
        return country?.Equals("United States", StringComparison.OrdinalIgnoreCase) == true;
    }

    private async Task ApplyVisaNarrowingLogic()
    {
        try
        {
            // Get eligible visa categories based on user responses
            var eligibleCategories = VisaNarrowingService.GetEligibleVisaCategories(registrationModel, selectedGoal.ToString());
            var ineligibleVisas = VisaNarrowingService.GetIneligibleVisaTypes(registrationModel);
            var summary = VisaNarrowingService.GetVisaRecommendationSummary(registrationModel, selectedGoal.ToString());
            
            Logger.LogInformation("Visa narrowing applied for user. Eligible categories: {Categories}, Ineligible visas: {IneligibleVisas}", 
                string.Join(", ", eligibleCategories), 
                string.Join(", ", ineligibleVisas));
            
            Console.WriteLine($"Visa Recommendation: {summary}");
            
            // Store the narrowing results in session or user preferences
            // This could be saved to database or session storage for later use
            savedAnswers["EligibleCategories"] = string.Join(",", eligibleCategories);
            savedAnswers["IneligibleVisas"] = string.Join(",", ineligibleVisas);
            savedAnswers["RecommendationSummary"] = summary;
            
            // Save progress to include the narrowing results
            if (intakeSessionId.HasValue)
            {
                await SaveProgress();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error applying visa narrowing logic");
            Console.WriteLine($"Error in visa narrowing: {ex.Message}");
        }
    }


    public class InterviewStep 
    { 
        public string Question { get; set; } = ""; 
        public string Placeholder { get; set; } = ""; 
        public string PropertyName { get; set; } = ""; 
        public string Type { get; set; } = "text"; 
        public string? Pattern { get; set; } 
        public string? Title { get; set; } 
        public bool Required { get; set; } = true;
        public List<string>? Options { get; set; }
    }

    public class UserInputModel
    {
        public string? CurrentValue { get; set; }
    }

    public void Dispose()
    {
        CultureState.OnChange -= OnCultureChanged;
        AuthState.OnChange -= OnAuthChanged;
    }

    private record LoginResult(Guid UserId, string Message);
}