@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net
@using System.Text.Json
@using Law4Hire.Core.DTOs
@using Law4Hire.Core.Entities
@using System.Linq
@using Microsoft.Extensions.Localization
@rendermode InteractiveServer
@* @inject HttpClient Http *@
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Home> Localizer
@inject Law4Hire.Web.State.CultureState CultureState
@inject Law4Hire.Web.State.AuthState AuthState
@implements IDisposable

<PageTitle>@Localizer["PageTitle"] - Law4Hire</PageTitle>

<div class="container mt-5">
    @if (!showInterview)
    {
        <div class="row justify-content-center mb-3">
            <div class="col-lg-8 text-center">
                <h1 class="display-4 mb-4">@Localizer["WelcomeTitle"]</h1>
                <p class="lead text-muted mb-0">@Localizer["WelcomeSubtitle"]</p>
            </div>
        </div>
        
        <div class="row justify-content-center">
            <div class="col-lg-10">
                <div class="immigration-options-grid">
                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Visit)">
                        <div class="option-icon">
                            <img src="/images/visit_usa_icon.png" alt="@Localizer["VisitUSA"]" />
                        </div>
                        <h5>@Localizer["VisitUSA"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Immigrate)">
                        <div class="option-icon">
                            <img src="/images/greencard.png" alt="@Localizer["ImmigrateGreenCard"]" />
                        </div>
                        <h5>@Localizer["ImmigrateGreenCard"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Investment)">
                        <div class="option-icon">
                            <img src="/images/invest_icon.png" alt="@Localizer["InvestUSA"]" />
                        </div>
                        <h5>@Localizer["InvestUSA"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Work)">
                        <div class="option-icon">
                            <img src="/images/work_icon.png" alt="@Localizer["WorkUSA"]" />
                        </div>
                        <h5>@Localizer["WorkUSA"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Asylum)">
                        <div class="option-icon">
                            <img src="/images/asylum_icon.png" alt="@Localizer["ApplyAsylum"]" />
                        </div>
                        <h5>@Localizer["ApplyAsylum"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Study)">
                        <div class="option-icon">
                            <img src="/images/study_icon.png" alt="@Localizer["StudyUSA"]" />
                        </div>
                        <h5>@Localizer["StudyUSA"]</h5>
                    </div>

                    <div class="immigration-option" @onclick="() => StartInterview(ImmigrationGoal.Family)">
                        <div class="option-icon">
                            <img src="/images/family_icon.png" alt="@Localizer["JoinFamily"]" />
                        </div>
                        <h5>@Localizer["JoinFamily"]</h5>
                    </div>
                    
                    <div class="immigration-option login-option" @onclick="GoToLogin">
                        <div class="option-icon">
                            <span class="login-icon">👤</span>
                        </div>
                        <h5>@Localizer["LoginAccount"]</h5>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="interview-widget">
                    <div class="interview-header">
                        <button class="btn btn-outline-secondary btn-sm mb-3" @onclick="BackToOptions">
                            ← @Localizer["BackToOptions"]
                        </button>
                        @if (AuthState.IsLoggedIn)
                        {
                            <button class="btn btn-outline-danger btn-sm mb-3 ms-2" @onclick="ResetInterview">
                                🔄 Reset Interview
                            </button>
                        }
                        <h2 class="mb-4">@Localizer["StartYourJourney"]</h2>
                        <p class="text-muted mb-4">@GetGoalDescription(selectedGoal)</p>
                    </div>
                    
                    <div class="interview-content">
                        @if (!isCompleted)
                        {
                            <EditForm Model="@userInput" OnValidSubmit="HandleNextStep">
                                <DataAnnotationsValidator />
                                
                                <div class="mb-4">
                                    <label class="form-label fw-bold">@currentStep.Question</label>
                                    
                                    @if (currentStep.Type == "select")
                                    {
                                        <select @bind="userInput.CurrentValue" class="form-control" required="@currentStep.Required">
                                            <option value="">@Localizer["PleaseSelect"]</option>
                                            @if (currentStep.Options != null)
                                            {
                                                @foreach (var option in currentStep.Options)
                                                {
                                                    <option value="@option">@option</option>
                                                }
                                            }
                                        </select>
                                    }
                                    else if (currentStep.Type == "radio")
                                    {
                                        @if (currentStep.Options != null)
                                        {
                                            @foreach (var option in currentStep.Options)
                                            {
                                                <div class="form-check">
                                                    <input class="form-check-input" 
                                                           type="radio" 
                                                           name="@currentStep.PropertyName" 
                                                           value="@option" 
                                                           @onchange="@((e) => userInput.CurrentValue = e.Value?.ToString())"
                                                           checked="@(userInput.CurrentValue == option)" />
                                                    <label class="form-check-label">@option</label>
                                                </div>
                                            }
                                        }
                                    }
                                    else if (currentStep.Type == "password")
                                    {
                                        <input type="password"
                                               @bind-value="userInput.CurrentValue"
                                               class="form-control"
                                               placeholder="@currentStep.Placeholder"
                                               pattern="@currentStep.Pattern"
                                               title="@currentStep.Title"
                                               required="@currentStep.Required"
                                               autofocus />
                                    }
                                    else
                                    {
                                        <input type="@currentStep.Type" 
                                               @bind-value="userInput.CurrentValue" 
                                               class="form-control" 
                                               placeholder="@currentStep.Placeholder" 
                                               pattern="@currentStep.Pattern" 
                                               title="@currentStep.Title" 
                                               required="@currentStep.Required" />
                                    }
                                    
                                    <ValidationMessage For="@(() => userInput.CurrentValue)" />

                                    @if (emailExists && currentStepIndex == 5)
                                    {
                                        <div class="alert alert-info mt-2">
                                            @Localizer["EmailExistsMessage"]
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(errorMessage))
                                    {
                                        <div class="alert alert-danger mt-2">@errorMessage</div>
                                    }
                                </div>
                                
                                <div class="d-flex gap-2">
                                    <button type="submit" class="btn btn-primary">
                                        @if (currentStepIndex < steps.Count - 1)
                                        {
                                            @Localizer["Next"] <span>→</span>
                                        }
                                        else
                                        {
                                            @Localizer["Complete"]
                                        }
                                    </button>
                                    
                                    @if (currentStepIndex > 0)
                                    {
                                        <button type="button" class="btn btn-outline-secondary" @onclick="PreviousStep">
                                            ← @Localizer["Previous"]
                                        </button>
                                    }
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
[Inject] private HttpClient Http { get; set; } = default!;
[Inject] private NavigationManager Nav { get; set; } = default!;


    private async Task SelectCategory(string category)
    {
        await Http.PostAsync($"/api/visainterview/reset?category={category}", null);
        Nav.NavigateTo("/interview");
    }

    public enum ImmigrationGoal
    {
        Visit,
        Immigrate,
        Investment,
        Work,
        Asylum,
        Study,
        Family
    }

    private bool showInterview = false;
    private bool isCompleted = false;
    private bool emailExists = false;
    private bool accountCreated = false;
    private bool askState = false;
    private ImmigrationGoal selectedGoal;
    private List<InterviewStep> steps = new();
    private int currentStepIndex = 0;
    private InterviewStep currentStep =>
        currentStepIndex >= 0 && currentStepIndex < steps.Count
            ? steps[currentStepIndex]
            : new InterviewStep();
    private UserInputModel userInput = new();
    private UserRegistrationDto registrationModel = new();
    private Guid? intakeSessionId;
    private Dictionary<string, string> savedAnswers = new();
    private int goalStartIndex;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await InitializeStepsAsync();
        CultureState.OnChange += OnCultureChanged;
        AuthState.OnChange += OnAuthChanged;
    }

    private async void OnCultureChanged()
    {
        await InitializeStepsAsync(); // Reinitialize steps with new culture
        await InvokeAsync(StateHasChanged);
    }

    private void OnAuthChanged()
    {
        if (!AuthState.IsLoggedIn)
        {
            BackToOptions();
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task InitializeStepsAsync()
    {
        var registrationSteps = new List<InterviewStep>
        {
            new InterviewStep
            {
                Question = Localizer["FirstNameQuestion"],
                Placeholder = Localizer["FirstNamePlaceholder"],
                PropertyName = "FirstName",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["LastNameQuestion"],
                Placeholder = Localizer["LastNamePlaceholder"],
                PropertyName = "LastName",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["MiddleNameQuestion"],
                Placeholder = Localizer["MiddleNamePlaceholder"],
                PropertyName = "MiddleName",
                Type = "text",
                Required = false
            },
            new InterviewStep
            {
                Question = Localizer["AddressQuestion"],
                Placeholder = Localizer["AddressPlaceholder"],
                PropertyName = "Address1",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["Address2Question"],
                Placeholder = Localizer["Address2Placeholder"],
                PropertyName = "Address2",
                Type = "text",
                Required = false
            },
            new InterviewStep
            {
                Question = Localizer["CityQuestion"],
                Placeholder = Localizer["CityPlaceholder"],
                PropertyName = "City",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["CountryQuestion"],
                Placeholder = Localizer["CountryPlaceholder"],
                PropertyName = "Country",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["StateQuestion"],
                Placeholder = Localizer["StatePlaceholder"],
                PropertyName = "State",
                Type = "text",
                Required = false
            },
            new InterviewStep
            {
                Question = Localizer["PostalCodeQuestion"],
                Placeholder = Localizer["PostalCodePlaceholder"],
                PropertyName = "PostalCode",
                Type = "text"
            },
            new InterviewStep
            {
                Question = Localizer["PhoneQuestion"],
                Placeholder = Localizer["PhonePlaceholder"],
                PropertyName = "PhoneNumber",
                Type = "tel"
            }
        };

        steps = new List<InterviewStep>();

        if (!AuthState.IsLoggedIn)
        {
            steps.Add(new InterviewStep
            {
                Question = Localizer["EmailQuestion"],
                Placeholder = Localizer["EmailPlaceholder"],
                PropertyName = "Email",
                Type = "email"
            });
        }

        steps.AddRange(registrationSteps);

        if (!AuthState.IsLoggedIn)
        {
            steps.Add(new InterviewStep
            {
                Question = Localizer["PasswordQuestion"],
                Placeholder = Localizer["PasswordPlaceholder"],
                PropertyName = "Password",
                Type = "password",
                Pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}",
                Title = Localizer["PasswordRequirements"]
            });
        }

        goalStartIndex = steps.Count;
    }

    private async Task StartInterview(ImmigrationGoal goal)
    {
        selectedGoal = goal;
        showInterview = true;
        accountCreated = false;
        currentStepIndex = 0;
        userInput = new UserInputModel();
        registrationModel = new UserRegistrationDto();
        savedAnswers = new Dictionary<string, string>();
        isCompleted = false;
        emailExists = false;
        intakeSessionId = null;
        registrationModel.ImmigrationGoal = goal.ToString();
        await InitializeStepsAsync();

        if (AuthState.IsLoggedIn)
        {
            await LoadExistingSession();
        }
    }

    private async Task LoadExistingSession()
    {
        try
        {
            if (AuthState.CurrentUser == null)
                return;

            var sessions = await Http.GetFromJsonAsync<List<IntakeSessionDto>>($"api/intake/users/{AuthState.CurrentUser.Id}/sessions");
            var active = sessions?.FirstOrDefault(s => s.CompletedAt == null);

            if (active != null)
            {
                intakeSessionId = active.Id;
                if (!string.IsNullOrWhiteSpace(active.SessionData))
                {
                    var progress = JsonSerializer.Deserialize<UpdateSessionProgressDto>(active.SessionData);
                    if (progress != null)
                    {
                        savedAnswers = progress.Answers;
                        currentStepIndex = progress.CurrentStep;
                        if (AuthState.IsLoggedIn && !steps.Any(s => s.PropertyName == "Email") && currentStepIndex >= 1)
                        {
                            currentStepIndex -= 1;
                        }
                        if (currentStepIndex >= steps.Count)
                        {
                            isCompleted = true;
                        }
                        else if (savedAnswers.TryGetValue(currentStep.PropertyName, out var val))
                        {
                            userInput.CurrentValue = val;
                        }
                    }
                }
            }
            else
            {
                var create = new CreateIntakeSessionDto(AuthState.CurrentUser.Id, CultureState.CurrentCulture.Name);
                var response = await Http.PostAsJsonAsync("api/intake/sessions", create);
                if (response.IsSuccessStatusCode)
                {
                    var created = await response.Content.ReadFromJsonAsync<IntakeSessionDto>();
                    intakeSessionId = created?.Id;
                }
            }
        }
        catch {}
    }

    private void BackToOptions()
    {
        showInterview = false;
        selectedGoal = ImmigrationGoal.Visit;
        currentStepIndex = 0;
    }

    private async Task ResetInterview()
    {
        if (AuthState.CurrentUser == null)
            return;
        await Http.DeleteAsync($"api/VisaInterview/reset?userId={AuthState.CurrentUser.Id}");
        BackToOptions();
        savedAnswers.Clear();
        intakeSessionId = null;
    }

    private void GoToLogin() 
    { 
        NavigationManager.NavigateTo("/login"); 
    }

    private void GoToDashboard() 
    { 
        NavigationManager.NavigateTo("/dashboard"); 
    }

    private string GetGoalDescription(ImmigrationGoal goal)
    {
        return goal switch
        {
            ImmigrationGoal.Visit => Localizer["VisitDescription"],
            ImmigrationGoal.Immigrate => Localizer["ImmigrateDescription"],
            ImmigrationGoal.Investment => Localizer["InvestmentDescription"],
            ImmigrationGoal.Work => Localizer["WorkDescription"],
            ImmigrationGoal.Asylum => Localizer["AsylumDescription"],
            ImmigrationGoal.Study => Localizer["StudyDescription"],
            ImmigrationGoal.Family => Localizer["FamilyDescription"],
            _ => ""
        };
    }

    private async Task HandleNextStep()
    {
        if (string.IsNullOrWhiteSpace(userInput.CurrentValue) && currentStep.Required != false)
            return;

        var propName = currentStep.PropertyName;
        savedAnswers[propName] = userInput.CurrentValue ?? "";

        switch (propName)
        {
            case "FirstName":
                registrationModel.FirstName = userInput.CurrentValue ?? "";
                break;
            case "LastName":
                registrationModel.LastName = userInput.CurrentValue ?? "";
                break;
            case "MiddleName":
                registrationModel.MiddleName = userInput.CurrentValue ?? "";
                break;
            case "Address1":
                registrationModel.Address1 = userInput.CurrentValue ?? "";
                break;
            case "Address2":
                registrationModel.Address2 = userInput.CurrentValue ?? "";
                break;
            case "City":
                registrationModel.City = userInput.CurrentValue ?? "";
                break;
            case "Country":
                registrationModel.Country = userInput.CurrentValue ?? "";
                askState = registrationModel.Country.Trim().Equals("USA", StringComparison.OrdinalIgnoreCase) ||
                           registrationModel.Country.Trim().Equals("United States", StringComparison.OrdinalIgnoreCase) ||
                           registrationModel.Country.Trim().Equals("US", StringComparison.OrdinalIgnoreCase);
                break;
            case "State":
                registrationModel.State = userInput.CurrentValue ?? "";
                break;
            case "PostalCode":
                registrationModel.PostalCode = userInput.CurrentValue ?? "";
                break;
            case "PhoneNumber":
                registrationModel.PhoneNumber = userInput.CurrentValue ?? "";
                break;
            case "Email":
                registrationModel.Email = userInput.CurrentValue ?? "";
                emailExists = await CheckEmailExists(registrationModel.Email);
                if (!AuthState.IsLoggedIn)
                {
                    var pwdIndex = steps.FindIndex(s => s.PropertyName == "Password");
                    if (pwdIndex >= 0)
                    {
                        steps[pwdIndex].Question = emailExists ? Localizer["ExistingPasswordQuestion"] : Localizer["PasswordQuestion"];
                        steps[pwdIndex].Placeholder = emailExists ? Localizer["ExistingPasswordPlaceholder"] : Localizer["PasswordPlaceholder"];
                        if (emailExists)
                        {
                            steps[pwdIndex].Pattern = null;
                            steps[pwdIndex].Title = null;
                        }
                        else
                        {
                            steps[pwdIndex].Pattern = @"(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}";
                            steps[pwdIndex].Title = Localizer["PasswordRequirements"];
                        }
                        if (emailExists)
                        {
                            // jump directly to password step
                            currentStepIndex = pwdIndex - 1;
                        }
                    }
                }
                break;
            case "Password":
                registrationModel.Password = userInput.CurrentValue ?? "";
                if (emailExists)
                {
                    errorMessage = null;
                    var success = await CompleteRegistration();
                    if (success)
                    {
                        accountCreated = false;
                        await LoadExistingSession();
                        currentStepIndex = goalStartIndex;
                        if (currentStepIndex >= steps.Count)
                        {
                            await StartVisaInterviewAsync();
                            NavigationManager.NavigateTo("/interview/phase2");
                            return;
                        }

                        if (savedAnswers.TryGetValue(currentStep.PropertyName, out var val))
                        {
                            userInput.CurrentValue = val;
                        }
                        StateHasChanged();
                        return;
                    }
                    else
                    {
                        userInput.CurrentValue = null;
                        StateHasChanged();
                        return;
                    }
                }
                break;
        }

        userInput.CurrentValue = null;
        currentStepIndex++;

        // Skip state step if not required
        if (propName == "Country" && !askState)
        {
            if (currentStepIndex < steps.Count && steps[currentStepIndex].PropertyName == "State")
            {
                currentStepIndex++;
            }
        }

        if (!emailExists && currentStepIndex == goalStartIndex)
        {
            errorMessage = null;
            var success = await CompleteRegistration();
            if (success)
            {
                accountCreated = true;
                await LoadExistingSession();
            }
            else
            {
                currentStepIndex--;
                userInput.CurrentValue = null;
                StateHasChanged();
                return;
            }
        }

        if (intakeSessionId.HasValue && currentStepIndex > goalStartIndex)
        {
            await SaveProgress();
        }

        if (currentStepIndex >= steps.Count)
        {
            await StartVisaInterviewAsync();
            NavigationManager.NavigateTo("/interview/phase2");
            return;
        }

        StateHasChanged();
    }


    private void PreviousStep()
    {
        if (currentStepIndex > 0)
        {
            currentStepIndex--;
            if (savedAnswers.TryGetValue(currentStep.PropertyName, out var val))
                userInput.CurrentValue = val;
            else
                userInput.CurrentValue = null;
        }
    }

    private async Task<bool> CheckEmailExists(string email)
    {
        try 
        { 
            var response = await Http.GetAsync($"api/auth/check-email?email={Uri.EscapeDataString(email)}"); 
            return response.IsSuccessStatusCode; 
        }
        catch 
        { 
            return false; 
        }
    }

    private async Task<bool> CompleteRegistration()
    {
        try
        {
            HttpResponseMessage response;
            if (emailExists)
            {
                var loginDto = new UserLoginDto
                {
                    Email = registrationModel.Email,
                    Password = registrationModel.Password
                };
                response = await Http.PostAsJsonAsync("api/auth/login", loginDto);
                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    errorMessage = Localizer["LoginError"];
                    return false;
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/auth/register", registrationModel);
                if (!response.IsSuccessStatusCode)
                {
                    errorMessage = Localizer["RegistrationError"];
                    return false;
                }
            }

            if (response.IsSuccessStatusCode)
            {
                var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
                if (loginResult != null)
                {
                    var user = await Http.GetFromJsonAsync<UserDto>($"api/users/{loginResult.UserId}");
                    if (user != null)
                    {
                        AuthState.SetUser(user);
                    }
                }
                return true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration/Login error: {ex.Message}");
            errorMessage = Localizer["RegistrationError"];
        }

        return false;
    }

    private async Task StartVisaInterviewAsync()
    {
        if (AuthState.CurrentUser == null)
            return;

        var initPayload = new
        {
            userId = AuthState.CurrentUser.Id,
            role = "client",
            category = GetGoalDescription(selectedGoal),
            language = CultureState.CurrentCulture.Name,
            firstName = registrationModel.FirstName,
            lastName = registrationModel.LastName
        };

        try
        {
            await Http.PostAsJsonAsync("api/VisaInterview/step", initPayload);
        }
        catch { }
    }

    private async Task SaveProgress()
    {
        if (!intakeSessionId.HasValue)
            return;

        var progress = new UpdateSessionProgressDto(currentStepIndex, savedAnswers);
        await Http.PatchAsJsonAsync($"api/intake/sessions/{intakeSessionId}/progress", progress);
    }


    public class InterviewStep 
    { 
        public string Question { get; set; } = ""; 
        public string Placeholder { get; set; } = ""; 
        public string PropertyName { get; set; } = ""; 
        public string Type { get; set; } = "text"; 
        public string? Pattern { get; set; } 
        public string? Title { get; set; } 
        public bool Required { get; set; } = true;
        public List<string>? Options { get; set; }
    }

    public class UserInputModel
    {
        public string? CurrentValue { get; set; }
    }

    public void Dispose()
    {
        CultureState.OnChange -= OnCultureChanged;
        AuthState.OnChange -= OnAuthChanged;
    }

    private record LoginResult(Guid UserId, string Message);
}