@page "/dashboard"
@using System.Net.Http.Json
@using Law4Hire.Core.DTOs
@inject HttpClient Http
@inject Law4Hire.Web.State.AuthState AuthState

<PageTitle>Dashboard</PageTitle>

@if (AuthState.CurrentUser is null)
{
    <p>Please log in to view your dashboard.</p>
}
else
{
    <h1 class="mb-4">Client Dashboard</h1>
    <div class="dashboard-grid">
        <div class="dashboard-card card">
            <div class="card-header d-flex align-items-center">
                <span class="me-2">üë§</span>
                <h3 class="mb-0">Personal Information</h3>
            </div>
            <div class="card-body">
                @if (!editMode)
                {
                    <p><strong>Name:</strong> @FullName</p>
                    <p><strong>Email:</strong> @editModel!.Email</p>
                    <p><strong>Phone:</strong> @editModel!.PhoneNumber</p>
                    <button class="btn btn-secondary btn-sm mt-2" @onclick="EnableEdit">Edit Information</button>
                }
                else
                {
                    <EditForm Model="editModel" OnValidSubmit="SaveUser">
                        <DataAnnotationsValidator />
                        <div class="mb-2">
                            <label class="form-label">First Name</label>
                            <InputText class="form-control" @bind-Value="editModel!.FirstName" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Middle Name</label>
                            <InputText class="form-control" @bind-Value="editModel!.MiddleName" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Last Name</label>
                            <InputText class="form-control" @bind-Value="editModel!.LastName" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="editModel!.Email" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Phone</label>
                            <InputText class="form-control" @bind-Value="editModel!.PhoneNumber" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Address 1</label>
                            <InputText class="form-control" @bind-Value="editModel!.Address1" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Address 2</label>
                            <InputText class="form-control" @bind-Value="editModel!.Address2" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">City</label>
                            <InputText class="form-control" @bind-Value="editModel!.City" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">State</label>
                            <InputText class="form-control" @bind-Value="editModel!.State" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Country</label>
                            <InputText class="form-control" @bind-Value="editModel!.Country" />
                        </div>
                        <div class="mb-2">
                            <label class="form-label">Postal Code</label>
                            <InputText class="form-control" @bind-Value="editModel!.PostalCode" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Birthdate</label>
                            <InputDate class="form-control" @bind-Value="editModel!.DateOfBirth" />
                        </div>
                        <button class="btn btn-primary btn-sm" type="submit">Save</button>
                    </EditForm>
                }
            </div>
        </div>

        <div class="dashboard-card card">
            <div class="card-header d-flex align-items-center">
                <span class="me-2">üìù</span>
                <h3 class="mb-0">My Documents</h3>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    @if (documents is null)
                    {
                        <li>Loading...</li>
                    }
                    else
                    {
                        @foreach (var doc in documents)
                        {
                            var badge = doc.Status switch
                            {
                                "NotStarted" => "bg-danger",
                                "InProgress" => "bg-secondary",
                                _ => "bg-success"
                            };
                            <li>@doc.DocumentName: <span class="badge @badge">@doc.Status</span></li>
                        }
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="dashboard-footer mt-4">
        Appointments, Messages and Statuses coming soon
    </div>
}

@code {
    private bool editMode;
    private UpdateUserDto? editModel;
    private List<DocumentInfo>? documents;

    private string FullName => string.Join(" ", new[]{editModel?.FirstName, editModel?.MiddleName, editModel?.LastName}.Where(s => !string.IsNullOrWhiteSpace(s)));

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser != null)
        {
            var u = AuthState.CurrentUser;
            editModel = new UpdateUserDto
            {
                Email = u.Email,
                FirstName = u.FirstName,
                MiddleName = u.MiddleName,
                LastName = u.LastName,
                PhoneNumber = u.PhoneNumber,
                PreferredLanguage = u.PreferredLanguage,
                Address1 = u.Address1,
                Address2 = u.Address2,
                City = u.City,
                State = u.State,
                Country = u.Country,
                PostalCode = u.PostalCode,
                DateOfBirth = u.DateOfBirth
            };
            documents = await Http.GetFromJsonAsync<List<DocumentInfo>>($"api/DocumentStatus/user/{u.Id}");
        }
    }

    private void EnableEdit() => editMode = true;

    private async Task SaveUser()
    {
        if (editModel is null || AuthState.CurrentUser is null) return;

        var response = await Http.PutAsJsonAsync($"api/users/{AuthState.CurrentUser.Id}", editModel);
        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<UserDto>();
            if (updated != null)
            {
                AuthState.SetUser(updated);
                editMode = false;
            }
        }
    }

    private record DocumentInfo(Guid DocumentTypeId, string DocumentName, string Status, string VisaType);
}
