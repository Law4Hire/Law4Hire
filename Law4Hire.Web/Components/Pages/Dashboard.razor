@page "/dashboard"
@using System.Net.Http.Json
@using Law4Hire.Core.DTOs
@using System.Linq
@using Law4Hire.Core.Enums
@inject HttpClient Http
@inject Law4Hire.Web.State.AuthState AuthState
@inject NavigationManager NavigationManager

<PageTitle>Dashboard</PageTitle>

@if (AuthState.CurrentUser is null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-8">
        <MudAlert Severity="Severity.Warning" ShowCloseIcon="false">
            <MudText>Please log in to view your dashboard.</MudText>
        </MudAlert>
    </MudContainer>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4">
        <!-- Welcome Header -->
        <MudPaper Elevation="2" Class="pa-6 mb-6" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h3" Class="font-weight-bold">Welcome back, @(AuthState.CurrentUser.FirstName)!</MudText>
                    <MudText Typo="Typo.subtitle1" Style="opacity: 0.9;">Track your immigration journey progress</MudText>
                </MudStack>
                <MudIcon Icon="@Icons.Material.Filled.Dashboard" Size="Size.Large" Style="font-size: 4rem; opacity: 0.3;" />
            </MudStack>
        </MudPaper>
        
        <MudGrid Spacing="4">
            <!-- Personal Information Card -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="4" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Person" Color="MudBlazor.Color.Primary" />
                                <MudText Typo="Typo.h6" Class="font-weight-bold">Personal Information</MudText>
                            </MudStack>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            @if (!editMode)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="MudBlazor.Color.Primary" OnClick="EnableEdit" Size="Size.Small" />
                            }
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (editModel == null)
                        {
                            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                                <MudProgressCircular Indeterminate="true" />
                                <MudText Typo="Typo.body2">Loading user information...</MudText>
                            </MudStack>
                        }
                        else if (!editMode)
                        {
                            <MudStack Spacing="3">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Badge" Color="MudBlazor.Color.Primary" Size="Size.Small" />
                                    <MudText><strong>Name:</strong> @FullName</MudText>
                                </MudStack>
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Email" Color="MudBlazor.Color.Primary" Size="Size.Small" />
                                    <MudText><strong>Email:</strong> @editModel.Email</MudText>
                                </MudStack>
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Phone" Color="MudBlazor.Color.Primary" Size="Size.Small" />
                                    <MudText><strong>Phone:</strong> @editModel.PhoneNumber</MudText>
                                </MudStack>
                            </MudStack>
                        }
                        else
                        {
                            <EditForm Model="editModel" OnValidSubmit="SaveUser">
                                <DataAnnotationsValidator />
                                <MudStack Spacing="3">
                                    <MudGrid Spacing="2">
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="editModel.FirstName" Label="First Name" Variant="Variant.Outlined" For="@(() => editModel.FirstName)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="editModel.MiddleName" Label="Middle Name" Variant="Variant.Outlined" For="@(() => editModel.MiddleName)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="editModel.LastName" Label="Last Name" Variant="Variant.Outlined" For="@(() => editModel.LastName)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="editModel.Email" Label="Email" Variant="Variant.Outlined" InputType="InputType.Email" For="@(() => editModel.Email)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudTextField @bind-Value="editModel.PhoneNumber" Label="Phone" Variant="Variant.Outlined" InputType="InputType.Telephone" For="@(() => editModel.PhoneNumber)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="6">
                                            <MudDatePicker @bind-Date="editModel.DateOfBirth" Label="Birth Date" Variant="Variant.Outlined" For="@(() => editModel.DateOfBirth)" />
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField @bind-Value="editModel.Address1" Label="Address Line 1" Variant="Variant.Outlined" For="@(() => editModel.Address1)" />
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField @bind-Value="editModel.Address2" Label="Address Line 2" Variant="Variant.Outlined" For="@(() => editModel.Address2)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            <MudTextField @bind-Value="editModel.City" Label="City" Variant="Variant.Outlined" For="@(() => editModel.City)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            <MudTextField @bind-Value="editModel.State" Label="State/Province" Variant="Variant.Outlined" For="@(() => editModel.State)" />
                                        </MudItem>
                                        <MudItem xs="12" sm="4">
                                            <MudTextField @bind-Value="editModel.PostalCode" Label="Postal Code" Variant="Variant.Outlined" For="@(() => editModel.PostalCode)" />
                                        </MudItem>
                                        <MudItem xs="12">
                                            <MudTextField @bind-Value="editModel.Country" Label="Country" Variant="Variant.Outlined" For="@(() => editModel.Country)" />
                                        </MudItem>
                                    </MudGrid>
                                    <MudStack Row Justify="Justify.FlexEnd" Spacing="2">
                                        <MudButton Variant="Variant.Text" OnClick="() => editMode = false">Cancel</MudButton>
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save Changes</MudButton>
                                    </MudStack>
                                </MudStack>
                            </EditForm>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
            
            <!-- Documents Card -->
            <MudItem xs="12" md="6">
                <MudCard Elevation="4" Style="height: 100%;">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                <MudIcon Icon="@Icons.Material.Filled.Description" Color="MudBlazor.Color.Primary" />
                                <MudText Typo="Typo.h6" Class="font-weight-bold">
                                    @if (!string.IsNullOrEmpty(selectedVisaType))
                                    {
                                        @($"My Documents - {selectedVisaType}")
                                    }
                                    else
                                    {
                                        @("My Documents")
                                    }
                                </MudText>
                            </MudStack>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @if (documents is null)
                        {
                            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                                <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                                <MudText Typo="Typo.body2">Loading documents...</MudText>
                            </MudStack>
                        }
                        else if (!documents.Any())
                        {
                            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-4">
                                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="MudBlazor.Color.Secondary" Style="font-size: 4rem; opacity: 0.5;" />
                                <MudText Typo="Typo.body1" Align="MudBlazor.Align.Center">No documents found. Complete your visa interview to get started.</MudText>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" OnClick="ContinueInterview" StartIcon="@Icons.Material.Filled.PlayArrow">
                                    Start Visa Interview
                                </MudButton>
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Spacing="2">
                                @foreach (var doc in documents)
                                {
                                    var (statusColor, statusIcon) = doc.Status switch
                                    {
                                        "NotStarted" => (MudBlazor.Color.Error, Icons.Material.Filled.RadioButtonUnchecked),
                                        "InProgress" => (MudBlazor.Color.Warning, Icons.Material.Filled.Schedule), 
                                        "Submitted" => (MudBlazor.Color.Info, Icons.Material.Filled.CloudUpload),
                                        "Approved" => (MudBlazor.Color.Success, Icons.Material.Filled.CheckCircle),
                                        "Completed" => (MudBlazor.Color.Success, Icons.Material.Filled.CheckCircle),
                                        _ => (MudBlazor.Color.Success, Icons.Material.Filled.CheckCircle)
                                    };
                                    
                                    <MudPaper Elevation="2" Class="pa-3">
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.Description" Color="@statusColor" Size="Size.Large" />
                                                <MudChip T="string" Size="Size.Small" Color="@(doc.IsGovernmentProvided ? MudBlazor.Color.Error : MudBlazor.Color.Primary)">@(doc.IsGovernmentProvided ? ".GOV" : "User")</MudChip>
                                            </MudStack>
                                            
                                            <MudStack Spacing="1" Style="flex-grow: 1;">
                                                <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@doc.DocumentName</MudText>
                                                <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary">@doc.VisaType</MudText>
                                                <MudChip T="string" Icon="@statusIcon" Color="@statusColor" Size="Size.Small">@doc.StatusText</MudChip>
                                            </MudStack>
                                        </MudStack>
                                    </MudPaper>
                                }
                            </MudStack>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <!-- Workflow Section -->
        <MudGrid Spacing="4" Class="mt-6">
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Class="font-weight-bold mb-4">Your Visa Workflow</MudText>
                
                @if (workflow != null)
                {
                    <MudCard Elevation="6">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.h5" Class="font-weight-bold">@workflow.VisaType Visa Process</MudText>
                                        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                            <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" Color="MudBlazor.Color.Secondary" />
                                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary">Estimated Time: @workflow.EstimatedTotalTimeDays days</MudText>
                                        </MudStack>
                                    </MudStack>
                                    <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" OnClick="OpenCostCalculator" StartIcon="@Icons.Material.Filled.Calculate">
                                        Calculate Total Cost
                                    </MudButton>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>

                            <!-- Workflow Carousel Navigation -->
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                                <MudStack Row Spacing="2">
                                    <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" OnClick="PreviousStep" 
                                               Disabled="@(currentWorkflowStep <= 0)" StartIcon="@Icons.Material.Filled.ArrowBack">
                                        Previous
                                    </MudButton>
                                    <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" OnClick="NextStep" 
                                               Disabled="@(currentWorkflowStep >= workflow.Steps.Count - 1)" EndIcon="@Icons.Material.Filled.ArrowForward">
                                        Next
                                    </MudButton>
                                </MudStack>
                                <MudChip T="string" Color="MudBlazor.Color.Info">Step @(currentWorkflowStep + 1) of @workflow.Steps.Count</MudChip>
                            </MudStack>

                            <!-- Current Step Display -->
                            @if (workflow.Steps.Any() && currentWorkflowStep < workflow.Steps.Count)
                            {
                                var step = workflow.Steps[currentWorkflowStep];
                                <MudPaper Elevation="3" Class="pa-4">
                                    <MudStack Spacing="4">
                                        <!-- Step Header -->
                                        <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                                            <MudText Typo="Typo.h6" Class="font-weight-bold">@step.Name</MudText>
                                            @if (!string.IsNullOrEmpty(step.GovernmentLink))
                                            {
                                                <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" 
                                                           Href="@step.GovernmentLink" Target="_blank" 
                                                           StartIcon="@Icons.Material.Filled.OpenInNew" Size="Size.Small">
                                                    Gov Form
                                                </MudButton>
                                            }
                                        </MudStack>
                                        
                                        <!-- Step Description -->
                                        <MudText Typo="Typo.body1" Color="MudBlazor.Color.Secondary">@step.Description</MudText>
                                        
                                        <!-- Time Estimate -->
                                        <MudPaper Elevation="1" Class="pa-3" Style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
                                            <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                                <MudIcon Icon="@Icons.Material.Filled.AccessTime" Color="MudBlazor.Color.Primary" />
                                                <MudText Typo="Typo.h6" Color="MudBlazor.Color.Primary" Class="font-weight-bold">@step.EstimatedTimeDays days</MudText>
                                                <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary">Estimated Time</MudText>
                                            </MudStack>
                                        </MudPaper>

                                        <!-- Documents Section -->
                                        @if (step.Documents.Any())
                                        {
                                            <MudDivider />
                                            <MudStack Spacing="3">
                                                <MudText Typo="Typo.h6" Class="font-weight-bold">Required Documents</MudText>
                                                <MudGrid Spacing="3">
                                                    @foreach (var doc in step.Documents)
                                                    {
                                                        <MudItem xs="12" lg="6">
                                                            <MudCard Elevation="2" Style="height: 100%;">
                                                                <MudCardContent>
                                                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="3">
                                                                        <MudStack AlignItems="AlignItems.Center" Spacing="1">
                                                                            <MudIcon Icon="@Icons.Material.Filled.Description" 
                                                                                     Color="@(doc.IsGovernmentProvided ? MudBlazor.Color.Error : MudBlazor.Color.Primary)" 
                                                                                     Size="Size.Large" />
                                                                            <MudChip T="string" Size="Size.Small" 
                                                                                     Color="@(doc.IsGovernmentProvided ? MudBlazor.Color.Error : MudBlazor.Color.Primary)">@(doc.IsGovernmentProvided ? ".GOV" : "User")</MudChip>
                                                                        </MudStack>
                                                                        
                                                                        <MudStack Spacing="2" Style="flex-grow: 1;">
                                                                            <MudText Typo="Typo.subtitle1" Class="font-weight-bold">@doc.Name</MudText>
                                                                            <MudText Typo="Typo.caption" Color="MudBlazor.Color.Secondary">@doc.StatusText</MudText>
                                                                            
                                                                            <MudStack Row Spacing="1">
                                                                                @if (doc.IsGovernmentProvided && !string.IsNullOrEmpty(doc.GovernmentLink))
                                                                                {
                                                                                    <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" 
                                                                                               Href="@doc.GovernmentLink" Target="_blank" 
                                                                                               StartIcon="@Icons.Material.Filled.Download" Size="Size.Small">
                                                                                        Download
                                                                                    </MudButton>
                                                                                }
                                                                                else if (!doc.IsGovernmentProvided)
                                                                                {
                                                                                    @if (doc.Status.Equals(DocumentStatusEnum.NotStarted))
                                                                                    {
                                                                                        <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Primary" 
                                                                                                   StartIcon="@Icons.Material.Filled.Upload" Size="Size.Small">
                                                                                            Upload
                                                                                        </MudButton>
                                                                                    }
                                                                                    else if (!string.IsNullOrEmpty(doc.FilePath))
                                                                                    {
                                                                                        <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Success" 
                                                                                                   StartIcon="@Icons.Material.Filled.Visibility" Size="Size.Small">
                                                                                            View
                                                                                        </MudButton>
                                                                                    }
                                                                                }
                                                                            </MudStack>
                                                                        </MudStack>
                                                                    </MudStack>
                                                                </MudCardContent>
                                                            </MudCard>
                                                        </MudItem>
                                                    }
                                                </MudGrid>
                                            </MudStack>
                                        }
                                    </MudStack>
                                </MudPaper>
                            }
                        </MudCardContent>
                    </MudCard>
                }
                else if (isLoadingWorkflow)
                {
                    <MudCard Elevation="3">
                        <MudCardContent>
                            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-6">
                                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                                <MudText Typo="Typo.h6">Loading your workflow...</MudText>
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px" />
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }
                else
                {
                    <MudCard Elevation="3">
                        <MudCardContent>
                            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-6">
                                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Large" Color="MudBlazor.Color.Secondary" Style="font-size: 5rem; opacity: 0.5;" />
                                <MudText Typo="Typo.h6" Align="MudBlazor.Align.Center">No visa workflow found</MudText>
                                <MudText Typo="Typo.body1" Color="MudBlazor.Color.Secondary" Align="MudBlazor.Align.Center">
                                    Complete your visa interview to see your personalized workflow.
                                </MudText>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" 
                                           Href="/interview/phase2" StartIcon="@Icons.Material.Filled.PlayArrow" Size="Size.Large">
                                    Start Visa Interview
                                </MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                }
            </MudItem>
        </MudGrid>
        
        <!-- Footer Section -->
        <MudPaper Elevation="1" Class="pa-4 mt-6" Style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Construction" Color="MudBlazor.Color.Secondary" />
                <MudText Typo="Typo.body1" Color="MudBlazor.Color.Secondary" Class="font-weight-medium">
                    Appointments, Messages and Status Updates coming soon!
                </MudText>
            </MudStack>
        </MudPaper>
    </MudContainer>
}

<!-- Cost Calculator Dialog -->
<MudDialog @bind-IsVisible="showCostCalculator" Options="@(new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true })">
    <TitleContent>
        <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Calculate" />
            <MudText Typo="Typo.h6">Calculate Total Estimated Cost</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="4">
            @if (servicePackages == null)
            {
                <MudStack AlignItems="AlignItems.Center" Spacing="3">
                    <MudProgressCircular Indeterminate="true" />
                    <MudText Typo="Typo.body1">Loading pricing options...</MudText>
                </MudStack>
            }
            else
            {
                <MudText Typo="Typo.h6" Class="mb-3">Select your service package for @(workflow?.VisaType ?? "your visa"):</MudText>
                
                <!-- Package Type Dropdown -->
                <MudSelect T="string" @bind-Value="selectedPackageType" Label="Package Type" Variant="Variant.Outlined" FullWidth="true">
                    <MudSelectItem Value="@string.Empty">Select a package type...</MudSelectItem>
                    @foreach (var packageGroup in packagesByType)
                    {
                        <MudSelectItem Value="@packageGroup.Key">@packageGroup.Key</MudSelectItem>
                    }
                </MudSelect>

                @if (!string.IsNullOrEmpty(selectedPackageType) && packagesByType.ContainsKey(selectedPackageType))
                {
                    <MudGrid Spacing="3">
                        @foreach (var package in packagesByType[selectedPackageType])
                        {
                            <MudItem xs="12" md="6">
                                <MudCard Elevation="@(selectedPackageId == package.Id ? 8 : 2)" 
                                         Style="@(selectedPackageId == package.Id ? "border: 2px solid var(--mud-palette-primary);" : "")">
                                    <MudCardContent>
                                        <MudStack Spacing="3">
                                            <MudRadioGroup @bind-Value="selectedPackageId" T="int?">
                                                <MudRadio T="int?" Value="@((int?)package.Id)" Color="MudBlazor.Color.Primary">
                                                    <MudText Typo="Typo.h6" Class="font-weight-bold">@package.Name</MudText>
                                                </MudRadio>
                                            </MudRadioGroup>
                                            
                                            <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary">@package.Description</MudText>
                                            
                                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                <MudText Typo="Typo.h5" Color="MudBlazor.Color.Success" Class="font-weight-bold">
                                                    $@package.BasePrice.ToString("N2")
                                                </MudText>
                                                @if (package.HasMoneyBackGuarantee)
                                                {
                                                    <MudChip T="string" Color="MudBlazor.Color.Success" Size="Size.Small">Money Back Guarantee</MudChip>
                                                }
                                            </MudStack>
                                        </MudStack>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                
                @if (selectedPackageId.HasValue && workflow != null)
                {
                    <MudPaper Elevation="3" Class="pa-4" Style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);">
                        <MudStack Spacing="3">
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.h5" Class="font-weight-bold">Total Estimated Cost:</MudText>
                                <MudText Typo="Typo.h4" Color="MudBlazor.Color.Success" Class="font-weight-bold">
                                    $@((selectedPackage?.BasePrice ?? 0) + workflow.EstimatedTotalCost).ToString("N2")
                                </MudText>
                            </MudStack>
                            
                            <MudAlert Severity="Severity.Info" ShowCloseIcon="false">
                                <strong>Note:</strong> This is an estimate only. Final costs may vary based on case complexity and government requirements.
                            </MudAlert>
                            
                            @if (selectedPackage?.HasMoneyBackGuarantee == true)
                            {
                                <MudAlert Severity="Severity.Success" ShowCloseIcon="false">
                                    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Shield" />
                                        <MudText><strong>Money Back Guarantee:</strong> This package includes our money back guarantee.</MudText>
                                    </MudStack>
                                </MudAlert>
                            }
                        </MudStack>
                    </MudPaper>
                }
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseCostCalculator" Variant="Variant.Text">Close</MudButton>
        @if (selectedPackageId.HasValue)
        {
            <MudButton OnClick="SelectServicePackage" Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.ShoppingCart">
                Select This Package
            </MudButton>
        }
    </DialogActions>
</MudDialog>
}

@code {
    private bool editMode;
    private UpdateUserDto? editModel;
    private List<DocumentInfo>? documents;
    private DashboardWorkflowDto? workflow;
    private bool isLoadingWorkflow = true;
    private int currentWorkflowStep = 0;
    private string selectedVisaType = "";
    
    // Cost Calculator
    private bool showCostCalculator = false;
    private List<ServicePackageDto>? servicePackages;
    private int? selectedPackageId;
    private ServicePackageDto? selectedPackage => servicePackages?.FirstOrDefault(p => p.Id == selectedPackageId);
    private string selectedPackageType = "";
    private Dictionary<string, List<ServicePackageDto>> packagesByType = new();

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.CurrentUser != null)
        {
            var u = AuthState.CurrentUser;
            editModel = new UpdateUserDto
            {
                Email = u.Email ?? string.Empty,
                FirstName = u.FirstName ?? string.Empty,
                MiddleName = u.MiddleName ?? string.Empty,
                LastName = u.LastName ?? string.Empty,
                PhoneNumber = u.PhoneNumber ?? string.Empty,
                PreferredLanguage = u.PreferredLanguage ?? "en",
                Address1 = u.Address1 ?? string.Empty,
                Address2 = u.Address2 ?? string.Empty,
                City = u.City ?? string.Empty,
                State = u.State ?? string.Empty,
                Country = u.Country ?? string.Empty,
                PostalCode = u.PostalCode ?? string.Empty,
                DateOfBirth = u.DateOfBirth
            };

            try
            {
                documents = await Http.GetFromJsonAsync<List<DocumentInfo>>($"api/Dashboard/documents/{u.Id}");
                selectedVisaType = await Http.GetStringAsync($"api/Dashboard/visa-type/{u.Id}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading documents: {ex.Message}");
                documents = new List<DocumentInfo>();
                selectedVisaType = "";
            }
        }

        await LoadWorkflow();
    }

    private async Task LoadWorkflow()
    {
        try
        {
            isLoadingWorkflow = true;
            StateHasChanged();

            if (AuthState.CurrentUser != null)
            {
                var response = await Http.GetAsync($"api/Dashboard/workflow/{AuthState.CurrentUser.Id}");
                if (response.IsSuccessStatusCode)
                {
                    workflow = await response.Content.ReadFromJsonAsync<DashboardWorkflowDto>();
                    currentWorkflowStep = 0; // Reset to first step when loading new workflow
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workflow: {ex.Message}");
        }
        finally
        {
            isLoadingWorkflow = false;
            StateHasChanged();
        }
    }

    private string FullName => editModel == null ? "Loading..." :
        string.Join(" ", new[] { editModel.FirstName, editModel.MiddleName, editModel.LastName }
            .Where(s => !string.IsNullOrWhiteSpace(s)));

    private void EnableEdit() => editMode = true;

    private async Task SaveUser()
    {
        if (editModel is null || AuthState.CurrentUser is null) return;

        var response = await Http.PutAsJsonAsync($"api/users/{AuthState.CurrentUser.Id}", editModel);
        if (response.IsSuccessStatusCode)
        {
            var updated = await response.Content.ReadFromJsonAsync<UserDto>();
            if (updated != null)
            {
                AuthState.SetUser(updated);
                editMode = false;
            }
        }
    }

    private void ContinueInterview()
    {
        NavigationManager.NavigateTo("/interview/phase2");
    }

    private void NextStep()
    {
        if (workflow != null && currentWorkflowStep < workflow.Steps.Count - 1)
        {
            currentWorkflowStep++;
            StateHasChanged();
        }
    }

    private void PreviousStep()
    {
        if (currentWorkflowStep > 0)
        {
            currentWorkflowStep--;
            StateHasChanged();
        }
    }

    // Cost Calculator Methods
    private async Task OpenCostCalculator()
    {
        showCostCalculator = true;
        
        if (servicePackages == null && workflow != null)
        {
            try
            {
                // Load service packages for this visa type
                servicePackages = await Http.GetFromJsonAsync<List<ServicePackageDto>>($"api/ServicePackages/visa/{workflow.VisaType}");
                
                // Group packages by type
                if (servicePackages != null)
                {
                    packagesByType = servicePackages
                        .GroupBy(p => p.Type.ToString())
                        .ToDictionary(g => g.Key, g => g.ToList());
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading service packages: {ex.Message}");
                servicePackages = new List<ServicePackageDto>();
                packagesByType = new Dictionary<string, List<ServicePackageDto>>();
            }
        }
        
        StateHasChanged();
    }

    private void CloseCostCalculator()
    {
        showCostCalculator = false;
        selectedPackageId = null;
        selectedPackageType = "";
        StateHasChanged();
    }

    private void OnPackageTypeChanged(string value)
    {
        selectedPackageType = value ?? "";
        selectedPackageId = null; // Reset package selection when type changes
        StateHasChanged();
    }

    private void SelectPackage(int packageId)
    {
        selectedPackageId = packageId;
        StateHasChanged();
    }

    private async Task SelectServicePackage()
    {
        if (!selectedPackageId.HasValue || AuthState.CurrentUser == null)
            return;

        try
        {
            // Create UserServicePackage record
            var userServicePackage = new
            {
                UserId = AuthState.CurrentUser.Id,
                ServicePackageId = selectedPackageId.Value,
                Paid = false
            };

            var response = await Http.PostAsJsonAsync("api/UserServicePackages", userServicePackage);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<dynamic>();
                var userServicePackageId = result?.GetProperty("id").GetInt32();
                
                // Redirect to cannlaw.com with the UserServicePackage ID
                NavigationManager.NavigateTo($"https://cannlaw.com?packageId={userServicePackageId}", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error selecting service package: {ex.Message}");
        }
    }

}