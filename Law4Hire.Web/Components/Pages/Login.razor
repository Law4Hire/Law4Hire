@page "/login"
@using System.Net.Http.Json
@using Law4Hire.Core.DTOs
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Law4Hire.Web.State.AuthState AuthState

<PageTitle>Login</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Elevation="8" Class="pa-8" Style="border-radius: 16px;">
        <MudStack Spacing="4">
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" Color="MudBlazor.Color.Primary" Style="font-size: 4rem;" />
                <MudText Typo="Typo.h3" Color="MudBlazor.Color.Primary" Class="font-weight-bold">Client Login</MudText>
                <MudText Typo="Typo.body1" Color="MudBlazor.Color.Secondary" Align="MudBlazor.Align.Center">
                    Welcome back! Please sign in to your account.
                </MudText>
            </MudStack>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="() => errorMessage = null">
                    @errorMessage
                </MudAlert>
            }
            
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <MudStack Spacing="3">
                    <MudTextField @bind-Value="loginModel.Email" 
                                  Label="Email Address" 
                                  Variant="Variant.Outlined" 
                                  InputType="InputType.Email"
                                  IconSize="Size.Medium"
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  For="@(() => loginModel.Email)" />
                    
                    <MudTextField @bind-Value="loginModel.Password" 
                                  Label="Password" 
                                  Variant="Variant.Outlined" 
                                  InputType="@passwordInputType"
                                  Adornment="Adornment.End" 
                                  AdornmentIcon="@passwordIcon" 
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  AdornmentAriaLabel="Show/Hide Password"
                                  For="@(() => loginModel.Password)" />
                    
                    <MudButton ButtonType="ButtonType.Submit" 
                               Variant="Variant.Filled" 
                               Color="MudBlazor.Color.Primary" 
                               Size="Size.Large"
                               FullWidth="true"
                               Disabled="@isLoading"
                               Class="py-3">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                            <span>Signing In...</span>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Login" Class="mr-2" />
                            <span>Sign In</span>
                        }
                    </MudButton>
                </MudStack>
            </EditForm>
            
            <MudDivider Class="my-4" />
            
            <MudStack AlignItems="AlignItems.Center" Spacing="2">
                <MudText Typo="Typo.body2" Color="MudBlazor.Color.Secondary">
                    Don't have an account yet?
                </MudText>
                <MudButton Variant="Variant.Text" 
                           Color="MudBlazor.Color.Primary" 
                           Href="/">
                    Start Your Immigration Journey
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private UserLoginDto loginModel = new();
    private bool isLoading = false;
    private string? errorMessage;
    private bool passwordVisible = false;
    private InputType passwordInputType = InputType.Password;
    private string passwordIcon = Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
        passwordInputType = passwordVisible ? InputType.Text : InputType.Password;
        passwordIcon = passwordVisible ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    }

    private async Task HandleLogin()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            errorMessage = "Email and password are required.";
            return;
        }
        
        isLoading = true;
        errorMessage = null;

        var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var loginResult = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (loginResult != null && !string.IsNullOrEmpty(loginResult.Token))
            {
                var user = await Http.GetFromJsonAsync<UserDto>($"api/users/{loginResult.UserId}");
                if (user != null)
                {
                    await AuthState.SetUserAsync(user, loginResult.Token);
                    NavigationManager.NavigateTo("/dashboard");
                }
            }
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }

        isLoading = false;
    }
}

@code {
    private record LoginResult(Guid UserId, string Message, string Token);
}
