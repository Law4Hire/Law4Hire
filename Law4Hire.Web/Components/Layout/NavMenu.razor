@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IStringLocalizer<NavMenu> Localizer
@inject Law4Hire.Web.State.CultureState CultureState
@using Microsoft.Extensions.Localization
@using System.Globalization
@implements IDisposable

<header class="top-nav-header">
    <nav class="container-fluid navbar navbar-expand-lg">
        <a class="navbar-brand" href="/">
            <span class="logo-icon" aria-hidden="true">🏛️</span>
            Law4Hire
        </a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavMenuCssClass" id="navbarNav">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">@Localizer["Home"]</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="pricing">@Localizer["Pricing"]</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="immigrationLibrary">@Localizer["Library"]</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="dashboard">@Localizer["Dashboard"]</NavLink>
                </li>
            </ul>
            <!-- Right-aligned items -->
            <ul class="navbar-nav ms-auto align-items-center">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="oi oi-globe" aria-hidden="true"></span> @GetCurrentLanguageName()
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="languageDropdown">
                        @foreach (var lang in SupportedLanguages)
                        {
                            <li>
                                <a class="dropdown-item @(IsCurrentCulture(lang.CultureCode) ? "active fw-bold" : "")"
                                   href="@GetCultureChangeUrl(lang.CultureCode)">
                                    @lang.Name
                                    @if (IsCurrentCulture(lang.CultureCode))
                                    {
                                        <span class="text-success ms-2">✓</span>
                                    }
                                </a>
                            </li>
                        }
                    </ul>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> @Localizer["Login"]
                    </NavLink>
                </li>
            </ul>
        </div>
    </nav>
</header>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        CultureState.OnChange += StateHasChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }

    // Get the current language name based on the actual current culture
    private string GetCurrentLanguageName()
    {
        var currentCulture = CultureInfo.CurrentUICulture.Name;
        var match = SupportedLanguages.FirstOrDefault(l => l.CultureCode == currentCulture);
        return match?.Name ?? "🇺🇸 English";
    }

    // Check if the given culture code is the current culture
    private bool IsCurrentCulture(string cultureCode)
    {
        return CultureInfo.CurrentUICulture.Name.Equals(cultureCode, StringComparison.OrdinalIgnoreCase);
    }

    // Generate the culture change URL with current page path
    private string GetCultureChangeUrl(string cultureCode)
    {
        // Don't generate URL for current culture
        if (IsCurrentCulture(cultureCode))
        {
            return "#";
        }

        // Get the current path and query string
        var currentUri = NavigationManager.Uri;
        var currentPath = new Uri(currentUri).PathAndQuery;

        // URL encode the redirect path
        var encodedRedirectUri = Uri.EscapeDataString(currentPath);

        // Build the culture change URL
        return $"/Culture/SetCulture?culture={cultureCode}&redirectUri={encodedRedirectUri}";
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private List<LanguageInfo> SupportedLanguages { get; } = new()
    {
        new("🇺🇸 English", "en-US"),
        new("🇪🇸 Español", "es-ES"),
        new("🇨🇳 中文 (简体)", "zh-CN"),
        new("🇮🇳 हिन्दी", "hi-IN"),
        new("🇸🇦 العربية", "ar-SA"),
        new("🇧🇩 বাংলা", "bn-BD"),
        new("🇵🇹 Português", "pt-PT"),
        new("🇷🇺 Русский", "ru-RU"),
        new("🇯🇵 日本語", "ja-JP"),
        new("🇩🇪 Deutsch", "de-DE"),
        new("🇫🇷 Français", "fr-FR"),
        new("🇵🇰 اردو", "ur-PK"),
        new("🇮🇩 Bahasa Indonesia", "id-ID"),
        new("🇹🇷 Türkçe", "tr-TR"),
        new("🇮🇹 Italiano", "it-IT"),
        new("🇻🇳 Tiếng Việt", "vi-VN"),
        new("🇰🇷 한국어", "ko-KR"),
        new("🇮🇳 தமிழ்", "ta-IN"),
        new("🇮🇳 తెలుగు", "te-IN"),
        new("🇮🇳 मराठी", "mr-IN"),
        new("🇵🇱 Polski", "pl-PL")
    };

    public record LanguageInfo(string Name, string CultureCode);

    public void Dispose()
    {
        CultureState.OnChange -= StateHasChanged;
    }
}