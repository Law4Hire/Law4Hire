@inject NavigationManager NavigationManager
@inject IStringLocalizer<NavMenu> Localizer
@inject Law4Hire.Web.State.CultureState CultureState
@inject Law4Hire.Web.State.AuthState AuthState
@inject HttpClient Http
@using Microsoft.Extensions.Localization
@using System.Globalization
@using System.Net.Http.Json
@implements IDisposable

<MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="flex-grow-1">
    <!-- Left side: Logo and Navigation -->
    <MudStack Row AlignItems="AlignItems.Center" Spacing="4">
        <MudText Typo="Typo.h6" Color="MudBlazor.Color.Inherit" Class="font-weight-bold">
            <MudLink Href="/" Color="MudBlazor.Color.Inherit" Underline="Underline.None" Class="font-weight-bold">Law4Hire</MudLink>
        </MudText>
        
        <MudStack Row Spacing="2">
            <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Inherit" Href="/" 
                       Class="text-capitalize" Style="font-weight: 500;">
                @Localizer["Home"]
            </MudButton>
            
            @if (hasVisa)
            {
                <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Inherit" Href="pricing" 
                           Class="text-capitalize" Style="font-weight: 500;">
                    @Localizer["Pricing"]
                </MudButton>
            }
            
            <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Inherit" Href="immigrationLibrary" 
                       Class="text-capitalize" Style="font-weight: 500;">
                @Localizer["Library"]
            </MudButton>
            
            @if (AuthState.IsLoggedIn)
            {
                <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Inherit" Href="dashboard" 
                           Class="text-capitalize" Style="font-weight: 500;">
                    @Localizer["Dashboard"]
                </MudButton>
                
                @if (isAdmin)
                {
                    <MudButton Variant="Variant.Text" Color="MudBlazor.Color.Inherit" Href="admin" 
                               Class="text-capitalize" Style="font-weight: 500;">
                        Admin
                    </MudButton>
                }
            }
        </MudStack>
    </MudStack>

    <!-- Right side controls -->
    <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
        <!-- Theme Toggle -->
        <MudIconButton Icon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                       Color="MudBlazor.Color.Inherit" 
                       Size="Size.Medium"
                       OnClick="ToggleTheme" />
        
        <!-- Language Selector -->
        <MudSelect T="string" Value="@currentLanguage" ValueChanged="OnLanguageChanged" 
                   Variant="Variant.Outlined" Margin="Margin.Dense" 
                   Style="min-width: 120px;"
                   Class="mud-select-outlined-inherit">
            @foreach (var lang in SupportedLanguages)
            {
                <MudSelectItem Value="@lang.CultureCode">@lang.Name</MudSelectItem>
            }
        </MudSelect>
        
        @if (!AuthState.IsLoggedIn)
        {
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" 
                       OnClick="@(() => NavigationManager.NavigateTo("/login"))">
                @Localizer["Login"]
            </MudButton>
        }
        else if (AuthState.CurrentUser is not null)
        {
            <MudText Color="MudBlazor.Color.Inherit" Class="font-weight-medium">Hello @AuthState.CurrentUser.FirstName</MudText>
            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" Size="Size.Small"
                       OnClick="@(() => NavigationManager.NavigateTo("/profile"))">
                Profile
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="MudBlazor.Color.Inherit" Size="Size.Small"
                       OnClick="Logout">
                Logout
            </MudButton>
        }
    </MudStack>
</MudStack>

@code {
    private bool hasVisa;
    private bool isAdmin;
    private string currentLanguage = "en-US";

    protected override async Task OnInitializedAsync()
    {
        CultureState.OnChange += OnStateChanged;
        AuthState.OnChange += OnStateChanged;
        currentLanguage = CultureInfo.CurrentUICulture.Name;
        await LoadVisaStatus();
        await CheckAdminRole();
    }

    private void Logout()
    {
        AuthState.Logout();
        NavigationManager.NavigateTo("/");
    }
    
    private void ChangeCulture(string cultureCode)
    {
        if (!IsCurrentCulture(cultureCode))
        {
            var url = GetCultureChangeUrl(cultureCode);
            NavigationManager.NavigateTo(url);
        }
    }

    private void OnLanguageChanged(string cultureCode)
    {
        if (!string.IsNullOrEmpty(cultureCode))
        {
            ChangeCulture(cultureCode);
        }
    }

    [Parameter] public bool IsDarkMode { get; set; }
    [Parameter] public EventCallback OnToggleTheme { get; set; }

    private async Task ToggleTheme()
    {
        await OnToggleTheme.InvokeAsync();
    }

    private bool IsCurrentCulture(string cultureCode)
    {
        return CultureInfo.CurrentUICulture.Name.Equals(cultureCode, StringComparison.OrdinalIgnoreCase);
    }

    private string GetCultureChangeUrl(string cultureCode)
    {
        if (IsCurrentCulture(cultureCode))
        {
            return "#";
        }

        var currentUri = NavigationManager.Uri;
        var currentPath = new Uri(currentUri).PathAndQuery;
        var encodedRedirectUri = Uri.EscapeDataString(currentPath);
        return $"/Culture/SetCulture?culture={cultureCode}&redirectUri={encodedRedirectUri}";
    }

    private List<LanguageInfo> SupportedLanguages { get; } = new()
    {
        new("🇺🇸 English", "en-US"),
        new("🇪🇸 Español", "es-ES"),
        new("🇨🇳 中文 (简体)", "zh-CN"),
        new("🇮🇳 हिन्दी", "hi-IN"),
        new("🇸🇦 العربية", "ar-SA"),
        new("🇧🇩 বাংলা", "bn-BD"),
        new("🇵🇹 Português", "pt-PT"),
        new("🇷🇺 Русский", "ru-RU"),
        new("🇯🇵 日本語", "ja-JP"),
        new("🇩🇪 Deutsch", "de-DE"),
        new("🇫🇷 Français", "fr-FR"),
        new("🇵🇰 اردو", "ur-PK"),
        new("🇮🇩 Bahasa Indonesia", "id-ID"),
        new("🇹🇷 Türkçe", "tr-TR"),
        new("🇮🇹 Italiano", "it-IT"),
        new("🇻🇳 Tiếng Việt", "vi-VN"),
        new("🇰🇷 한국어", "ko-KR"),
        new("🇮🇳 தமிழ்", "ta-IN"),
        new("🇮🇳 తెలుగు", "te-IN"),
        new("🇮🇳 मराठी", "mr-IN"),
        new("🇵🇱 Polski", "pl-PL")
    };

    public record LanguageInfo(string Name, string CultureCode);

    private async void OnStateChanged()
    {
        await LoadVisaStatus();
        await CheckAdminRole();
        StateHasChanged();
    }

    private async Task LoadVisaStatus()
    {
        if (AuthState.CurrentUser == null)
        {
            hasVisa = false;
            return;
        }

        try
        {
            hasVisa = await Http.GetFromJsonAsync<bool>($"api/UserVisas/user/{AuthState.CurrentUser.Id}/exists");
        }
        catch
        {
            hasVisa = false;
        }
    }

    private async Task CheckAdminRole()
    {
        if (AuthState.CurrentUser == null)
        {
            isAdmin = false;
            return;
        }

        try
        {
            isAdmin = await Http.GetFromJsonAsync<bool>($"api/Users/{AuthState.CurrentUser.Id}/isAdmin");
        }
        catch
        {
            isAdmin = false;
        }
    }

    public void Dispose()
    {
        CultureState.OnChange -= OnStateChanged;
        AuthState.OnChange -= OnStateChanged;
    }
}